
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 20:30:11 CST 2019
//----------------------------------------------------

package AnalizadorFs.gdato;

import AnalizadorFs.Estructura.Objeto;
import AnalizadorFs.Estructura.ConstantesFs;
import AnalizadorFs.Estructura.Valor;
import AnalizadorGxml.ErrorEjecucion;
import AnalizadorGxml.Estructura.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import creatorxml.Main;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 20:30:11 CST 2019
  */
public class sintacticoGdato extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGdato() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGdato(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGdato(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\011" +
    "\000\002\006\012\000\002\006\011\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\004\005\001\002\000\004\002\046\001" +
    "\002\000\004\006\007\001\002\000\004\002\000\001\002" +
    "\000\004\011\010\001\002\000\004\004\013\001\002\000" +
    "\006\004\013\005\042\001\002\000\006\004\ufffd\005\ufffd" +
    "\001\002\000\004\007\014\001\002\000\004\011\015\001" +
    "\002\000\004\004\016\001\002\000\004\013\034\001\002" +
    "\000\006\004\021\005\020\001\002\000\004\007\032\001" +
    "\002\000\004\013\022\001\002\000\004\011\023\001\002" +
    "\000\006\010\026\012\024\001\002\000\004\005\ufff8\001" +
    "\002\000\004\005\027\001\002\000\004\005\ufff9\001\002" +
    "\000\004\013\030\001\002\000\004\011\031\001\002\000" +
    "\006\004\ufffb\005\ufffb\001\002\000\004\011\033\001\002" +
    "\000\006\004\ufffc\005\ufffc\001\002\000\004\011\035\001" +
    "\002\000\006\010\026\012\024\001\002\000\004\005\037" +
    "\001\002\000\004\013\040\001\002\000\004\011\041\001" +
    "\002\000\006\004\ufffa\005\ufffa\001\002\000\004\006\044" +
    "\001\002\000\006\004\ufffe\005\ufffe\001\002\000\004\011" +
    "\045\001\002\000\004\002\uffff\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\010\005\011\001\001\000\004\005\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGdato$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGdato$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGdato$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	/*---------------Metodo que se llamara cuando sea encontrado algun error-----------------------------*/

	public void syntax_error(Symbol s){
	   	System.out.println("Error Sintactico -> lexema: |" + s.value +  "| " + "  Columna: "+  s.right + "linea:  "+  (s.left + 1) );
	   	String error = "el token \"" + s.value + "\" no es valida ";
                ErrorEjecucion err = new ErrorEjecucion("Sintactico Gxml",error,"sintactico","sintactico",(s.left + 1),s.right);
                Main.errores.add(err);
								
	}

	/*-----------------------------metodo para cuando ya no se pueda recuperar los errores-------------------*/

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	    System.out.println("Error Sintactico No Recuperable-> lexema: |" + s.value + "| Linea: " + s.right + " Columna: " + s.left);
	}

	public ArrayList<Valor> getVector(){

		return this.action_obj.raiz;
	}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGdato$actions {


	ArrayList<Valor> raiz;

  private final sintacticoGdato parser;

  /** Constructor */
  CUP$sintacticoGdato$actions(sintacticoGdato parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGdato$do_action(
    int                        CUP$sintacticoGdato$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGdato$parser,
    java.util.Stack            CUP$sintacticoGdato$stack,
    int                        CUP$sintacticoGdato$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGdato$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGdato$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONT_ELEMENTO ::= numero 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.peek()).value;
		
					RESULT = new Valor(n,ConstantesFs.TIPO_NUMERO);
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("CONT_ELEMENTO",5, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_ELEMENTO ::= cadenaXml 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.peek()).value;
		
					RESULT = new Valor(n,ConstantesFs.TIPO_CADENA);
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("CONT_ELEMENTO",5, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_ELEMENTO ::= abrir exp_id cerrar CONT_ELEMENTO abrird exp_id cerrar 
            {
              Objeto RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).right;
		Valor cont = (Valor)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).value;
		
					RESULT = new Objeto();
					RESULT.addAtributoValor(n,cont);
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTO",4, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_ELEMENTO ::= LISTA_ELEMENTO abrir exp_id cerrar CONT_ELEMENTO abrird exp_id cerrar 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-7)).right;
		Objeto l = (Objeto)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).right;
		Valor cont = (Valor)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).value;
		
					RESULT = l;
					RESULT.addAtributoValor(n,cont);
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTO",4, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPAL ::= abrir etq_principal cerrar LISTA_ELEMENTO abrird etq_principal cerrar 
            {
              Objeto RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).right;
		Objeto cont = (Objeto)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).value;
		
					RESULT = cont;
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",3, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_PRINCIPAL ::= PRINCIPAL 
            {
              ArrayList<Valor> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.peek()).value;
		
					RESULT = new ArrayList();
					RESULT.add(new Valor(p,ConstantesFs.TIPO_OBJETO));
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("LISTA_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_PRINCIPAL ::= LISTA_PRINCIPAL PRINCIPAL 
            {
              ArrayList<Valor> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)).right;
		ArrayList<Valor> l = (ArrayList<Valor>)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.peek()).value;
		
					RESULT =l;
					RESULT.add(new Valor(p,ConstantesFs.TIPO_OBJETO));
				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("LISTA_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA ::= abrir etq_lista cerrar LISTA_PRINCIPAL abrird etq_lista cerrar 
            {
              ArrayList<Valor> RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).right;
		ArrayList<Valor> cont = (ArrayList<Valor>)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-3)).value;
		
					RESULT = cont;

				
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= LISTA 
            {
              Object RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()).right;
		ArrayList<Valor> doc = (ArrayList<Valor>)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.peek()).value;
		
			raiz=doc;
		
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          return CUP$sintacticoGdato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGdato$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.elementAt(CUP$sintacticoGdato$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGdato$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGdato$parser.done_parsing();
          return CUP$sintacticoGdato$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

