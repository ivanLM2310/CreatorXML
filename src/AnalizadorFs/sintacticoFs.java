
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 20:34:55 CST 2019
//----------------------------------------------------

package AnalizadorFs;

import AnalizadorFs.Estructura.*;
import AnalizadorGxml.ErrorEjecucion;
import java_cup.runtime.*;
import creatorxml.Main;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 20:34:55 CST 2019
  */
public class sintacticoFs extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\003\004\000\002\003\003" +
    "\000\002\012\007\000\002\006\011\000\002\006\010\000" +
    "\002\006\012\000\002\006\011\000\002\007\006\000\002" +
    "\007\004\000\002\013\005\000\002\013\007\000\002\010" +
    "\004\000\002\010\005\000\002\011\004\000\002\011\005" +
    "\000\002\044\007\000\002\044\005\000\002\014\006\000" +
    "\002\014\011\000\002\014\007\000\002\014\012\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\015\005\000\002\015\003" +
    "\000\002\016\007\000\002\017\004\000\002\020\005\000" +
    "\002\020\004\000\002\021\011\000\002\022\004\000\002" +
    "\022\003\000\002\023\010\000\002\023\007\000\002\023" +
    "\003\000\002\024\007\000\002\024\006\000\002\025\010" +
    "\000\002\025\011\000\002\025\011\000\002\025\011\000" +
    "\002\025\012\000\002\025\012\000\002\026\004\000\002" +
    "\027\005\000\002\027\006\000\002\030\004\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\004\000\002" +
    "\032\005\000\002\032\005\000\002\032\004\000\002\032" +
    "\007\000\002\032\003\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\003\000\002\036\005\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\004\000\002\036\006\000\002\036" +
    "\007\000\002\036\003\000\002\036\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\005\000\002\040\004\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\006\000\002\041\006\000" +
    "\002\041\006\000\002\041\003\000\002\041\003\000\002" +
    "\042\005\000\002\042\003\000\002\043\005\000\002\043" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\050\004\030\005\036\010\034\013\011\014" +
    "\020\015\050\016\053\017\026\023\027\027\045\037\033" +
    "\045\042\046\007\047\012\050\032\064\054\067\041\070" +
    "\046\077\021\001\002\000\056\006\uffaa\007\uffaa\012\uffaa" +
    "\020\uffaa\022\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\066\uffaa\071\uffaa\001" +
    "\002\000\052\002\uffca\005\uffca\010\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\023\uffca\027\uffca\037" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\064\uffca\067\uffca" +
    "\070\uffca\077\uffca\001\002\000\004\002\u0101\001\002\000" +
    "\056\006\uffa0\007\uffa0\012\uffa0\020\uffa0\022\uffa0\025\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\066\uffa0\071\uffa0\001\002\000\024\006\uffbd\007" +
    "\uffbd\012\uffbd\020\uffbd\022\uffbd\025\uffbd\026\uffbd\066\uffbd" +
    "\071\uffbd\001\002\000\004\005\375\001\002\000\056\006" +
    "\uff9f\007\uff9f\012\uff9f\020\uff9f\022\uff9f\025\uff9f\026\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\066\uff9f\071\uff9f\001\002\000\050\004\ufffc\005\ufffc\010" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\023\ufffc" +
    "\027\ufffc\037\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\064" +
    "\ufffc\067\ufffc\070\ufffc\077\ufffc\001\002\000\004\002\000" +
    "\001\002\000\052\002\uffc3\005\uffc3\010\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\023\uffc3\027\uffc3" +
    "\037\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\064\uffc3\067" +
    "\uffc3\070\uffc3\077\uffc3\001\002\000\052\002\uffcb\005\uffcb" +
    "\010\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\023\uffcb\027\uffcb\037\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\064\uffcb\067\uffcb\070\uffcb\077\uffcb\001\002\000" +
    "\060\006\uffa3\007\uffa3\012\uffa3\020\uffa3\022\uffa3\025\uffa3" +
    "\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\051\063\066\uffa3\071\uffa3\001\002\000\004\007" +
    "\373\001\002\000\056\006\uff9d\007\uff9d\012\uff9d\020\uff9d" +
    "\022\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\066\uff9d\071\uff9d\001\002\000" +
    "\052\002\uffc4\005\uffc4\010\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\023\uffc4\027\uffc4\037\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\064\uffc4\067\uffc4\070\uffc4" +
    "\077\uffc4\001\002\000\056\006\uffa9\007\uffa9\012\uffa9\020" +
    "\uffa9\022\uffa9\025\uffa9\026\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\066\uffa9\071\uffa9\001\002" +
    "\000\056\006\uffac\007\uffac\012\uffac\020\uffac\022\uffac\025" +
    "\uffac\026\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\371\044\372\066\uffac\071\uffac\001\002\000\056\006\uffa8" +
    "\007\uffa8\012\uffa8\020\uffa8\022\uffa8\025\uffa8\026\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\066" +
    "\uffa8\071\uffa8\001\002\000\006\020\357\045\361\001\002" +
    "\000\004\005\336\001\002\000\004\005\332\001\002\000" +
    "\050\004\030\005\036\010\034\013\011\014\020\015\050" +
    "\016\053\017\026\023\027\027\045\037\033\045\042\046" +
    "\007\047\012\050\032\064\054\067\041\070\046\077\021" +
    "\001\002\000\056\006\uff9e\007\uff9e\012\uff9e\020\uff9e\022" +
    "\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\066\uff9e\071\uff9e\001\002\000\024" +
    "\005\036\017\026\045\060\046\007\047\012\050\032\064" +
    "\054\070\046\077\021\001\002\000\004\045\320\001\002" +
    "\000\052\002\uffc7\005\uffc7\010\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\023\uffc7\027\uffc7\037\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\064\uffc7\067\uffc7\070" +
    "\uffc7\077\uffc7\001\002\000\030\005\036\017\026\027\045" +
    "\037\033\045\060\046\007\047\012\050\032\064\054\070" +
    "\046\077\021\001\002\000\052\002\uffc6\005\uffc6\010\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\023" +
    "\uffc6\027\uffc6\037\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\064\uffc6\067\uffc6\070\uffc6\077\uffc6\001\002\000\012\007" +
    "\314\025\143\026\142\066\144\001\002\000\004\045\272" +
    "\001\002\000\064\005\061\007\uffa7\011\253\025\uffa7\026" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\051\063\066\uffa7\070\250\072\247\073\245\074\244" +
    "\075\246\001\002\000\050\002\ufffe\005\036\010\034\013" +
    "\011\014\020\015\050\016\053\017\026\023\027\027\045" +
    "\037\033\045\042\046\007\047\012\050\032\064\054\067" +
    "\041\070\046\077\021\001\002\000\052\002\uffc8\005\uffc8" +
    "\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\023\uffc8\027\uffc8\037\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\064\uffc8\067\uffc8\070\uffc8\077\uffc8\001\002\000" +
    "\030\005\036\017\026\027\045\037\033\045\060\046\007" +
    "\047\012\050\032\064\054\070\046\077\021\001\002\000" +
    "\032\005\036\017\026\027\045\037\033\045\060\046\007" +
    "\047\012\050\032\064\054\070\046\071\240\077\021\001" +
    "\002\000\052\002\uffc5\005\uffc5\010\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\023\uffc5\027\uffc5\037" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\064\uffc5\067\uffc5" +
    "\070\uffc5\077\uffc5\001\002\000\032\005\036\007\236\017" +
    "\026\027\045\037\033\045\060\046\007\047\012\050\032" +
    "\064\054\070\046\077\021\001\002\000\052\002\uffc9\005" +
    "\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\023\uffc9\027\uffc9\037\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\064\uffc9\067\uffc9\070\uffc9\077\uffc9\001\002" +
    "\000\052\006\uffb6\007\uffb6\012\uffb6\020\uffb6\022\uffb6\025" +
    "\uffb6\026\uffb6\030\220\031\212\032\210\033\216\034\213" +
    "\035\214\036\217\037\211\040\215\041\221\042\207\066" +
    "\uffb6\071\uffb6\001\002\000\004\005\056\001\002\000\056" +
    "\006\uffa1\007\uffa1\012\uffa1\020\uffa1\022\uffa1\025\uffa1\026" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\066\uffa1\071\uffa1\001\002\000\052\006\uffb0\007\uffb0" +
    "\012\uffb0\020\uffb0\022\uffb0\025\uffb0\026\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\066\uffb0\071\uffb0\001\002\000" +
    "\030\005\036\017\026\027\045\037\033\045\060\046\007" +
    "\047\012\050\032\064\054\070\046\077\021\001\002\000" +
    "\012\006\162\025\143\026\142\066\144\001\002\000\064" +
    "\005\061\006\uffa7\007\uffa7\012\uffa7\020\uffa7\022\uffa7\025" +
    "\uffa7\026\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\051\063\066\uffa7\070\062\071\uffa7\001\002" +
    "\000\032\005\036\006\154\017\026\027\045\037\033\045" +
    "\060\046\007\047\012\050\032\064\054\070\046\077\021" +
    "\001\002\000\030\005\036\017\026\027\045\037\033\045" +
    "\060\046\007\047\012\050\032\064\054\070\046\077\021" +
    "\001\002\000\032\045\070\052\103\053\074\054\101\055" +
    "\073\056\071\057\100\060\066\061\077\062\067\065\102" +
    "\076\076\001\002\000\060\006\uffa6\007\uffa6\012\uffa6\020" +
    "\uffa6\022\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\051\065\066\uffa6\071\uffa6" +
    "\001\002\000\032\045\070\052\103\053\074\054\101\055" +
    "\073\056\071\057\100\060\066\061\077\062\067\065\102" +
    "\076\076\001\002\000\004\005\135\001\002\000\004\005" +
    "\132\001\002\000\074\005\061\006\uff8e\007\uff8e\011\uff8e" +
    "\012\uff8e\020\uff8e\022\uff8e\025\uff8e\026\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\051\uff8e\066" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\001\002" +
    "\000\004\005\127\001\002\000\072\006\uff8f\007\uff8f\011" +
    "\uff8f\012\uff8f\020\uff8f\022\uff8f\025\uff8f\026\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\051\uff8f" +
    "\066\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\001" +
    "\002\000\004\005\125\001\002\000\004\005\123\001\002" +
    "\000\072\006\uff9c\007\uff9c\011\uff9c\012\uff9c\020\uff9c\022" +
    "\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\051\uff9c\066\uff9c\071\uff9c\072\uff9c" +
    "\073\uff9c\074\uff9c\075\uff9c\001\002\000\004\005\121\001" +
    "\002\000\004\005\116\001\002\000\004\005\113\001\002" +
    "\000\004\005\111\001\002\000\004\005\106\001\002\000" +
    "\004\005\104\001\002\000\004\006\105\001\002\000\072" +
    "\006\uff9a\007\uff9a\011\uff9a\012\uff9a\020\uff9a\022\uff9a\025" +
    "\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\051\uff9a\066\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\001\002\000\004\045\107\001\002\000" +
    "\004\006\110\001\002\000\072\006\uff90\007\uff90\011\uff90" +
    "\012\uff90\020\uff90\022\uff90\025\uff90\026\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\051\uff90\066" +
    "\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\001\002" +
    "\000\004\006\112\001\002\000\072\006\uff97\007\uff97\011" +
    "\uff97\012\uff97\020\uff97\022\uff97\025\uff97\026\uff97\030\uff97" +
    "\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\051\uff97" +
    "\066\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\001" +
    "\002\000\004\045\114\001\002\000\004\006\115\001\002" +
    "\000\072\006\uff94\007\uff94\011\uff94\012\uff94\020\uff94\022" +
    "\uff94\025\uff94\026\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\051\uff94\066\uff94\071\uff94\072\uff94" +
    "\073\uff94\074\uff94\075\uff94\001\002\000\004\045\117\001" +
    "\002\000\004\006\120\001\002\000\072\006\uff92\007\uff92" +
    "\011\uff92\012\uff92\020\uff92\022\uff92\025\uff92\026\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\051" +
    "\uff92\066\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92" +
    "\001\002\000\004\006\122\001\002\000\072\006\uff96\007" +
    "\uff96\011\uff96\012\uff96\020\uff96\022\uff96\025\uff96\026\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\051\uff96\066\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075" +
    "\uff96\001\002\000\004\006\124\001\002\000\072\006\uff99" +
    "\007\uff99\011\uff99\012\uff99\020\uff99\022\uff99\025\uff99\026" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\051\uff99\066\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\001\002\000\004\006\126\001\002\000\072\006" +
    "\uff98\007\uff98\011\uff98\012\uff98\020\uff98\022\uff98\025\uff98" +
    "\026\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\051\uff98\066\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\075\uff98\001\002\000\004\045\130\001\002\000\004" +
    "\006\131\001\002\000\072\006\uff95\007\uff95\011\uff95\012" +
    "\uff95\020\uff95\022\uff95\025\uff95\026\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\051\uff95\066\uff95" +
    "\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\001\002\000" +
    "\004\045\133\001\002\000\004\006\134\001\002\000\072" +
    "\006\uff91\007\uff91\011\uff91\012\uff91\020\uff91\022\uff91\025" +
    "\uff91\026\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\051\uff91\066\uff91\071\uff91\072\uff91\073\uff91" +
    "\074\uff91\075\uff91\001\002\000\004\045\136\001\002\000" +
    "\004\006\137\001\002\000\072\006\uff93\007\uff93\011\uff93" +
    "\012\uff93\020\uff93\022\uff93\025\uff93\026\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\051\uff93\066" +
    "\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\001\002" +
    "\000\072\006\uff9b\007\uff9b\011\uff9b\012\uff9b\020\uff9b\022" +
    "\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\051\uff9b\066\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\001\002\000\012\025\143\026" +
    "\142\066\144\071\145\001\002\000\030\005\036\017\026" +
    "\027\045\037\033\045\060\046\007\047\012\050\032\064" +
    "\054\070\046\077\021\001\002\000\030\005\036\017\026" +
    "\027\045\037\033\045\060\046\007\047\012\050\032\064" +
    "\054\070\046\077\021\001\002\000\030\005\036\017\026" +
    "\027\045\037\033\045\060\046\007\047\012\050\032\064" +
    "\054\070\046\077\021\001\002\000\060\006\uffa5\007\uffa5" +
    "\012\uffa5\020\uffa5\022\uffa5\025\uffa5\026\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\051\063\066" +
    "\uffa5\071\uffa5\001\002\000\060\006\uffa4\007\uffa4\012\uffa4" +
    "\020\uffa4\022\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\051\065\066\uffa4\071" +
    "\uffa4\001\002\000\012\022\150\025\143\026\142\066\144" +
    "\001\002\000\030\005\036\017\026\027\045\037\033\045" +
    "\060\046\007\047\012\050\032\064\054\070\046\077\021" +
    "\001\002\000\024\006\uffbe\007\uffbe\012\uffbe\020\uffbe\022" +
    "\uffbe\025\143\026\142\066\144\071\uffbe\001\002\000\024" +
    "\006\uffc1\007\uffc1\012\uffc1\020\uffc1\022\uffc1\025\uffc1\026" +
    "\142\066\uffc1\071\uffc1\001\002\000\024\006\uffc0\007\uffc0" +
    "\012\uffc0\020\uffc0\022\uffc0\025\uffc0\026\uffc0\066\uffc0\071" +
    "\uffc0\001\002\000\072\006\uff8b\007\uff8b\011\uff8b\012\uff8b" +
    "\020\uff8b\022\uff8b\025\uff8b\026\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\051\uff8b\066\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\001\002\000\016" +
    "\006\uff8c\012\uff8c\025\143\026\142\066\144\071\uff8c\001" +
    "\002\000\006\006\160\012\157\001\002\000\030\005\036" +
    "\017\026\027\045\037\033\045\060\046\007\047\012\050" +
    "\032\064\054\070\046\077\021\001\002\000\072\006\uff8a" +
    "\007\uff8a\011\uff8a\012\uff8a\020\uff8a\022\uff8a\025\uff8a\026" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\051\uff8a\066\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\075\uff8a\001\002\000\016\006\uff8d\012\uff8d\025\143\026" +
    "\142\066\144\071\uff8d\001\002\000\004\017\163\001\002" +
    "\000\006\021\167\063\170\001\002\000\010\020\205\021" +
    "\167\063\170\001\002\000\010\020\uffd8\021\uffd8\063\uffd8" +
    "\001\002\000\010\020\uffdb\021\uffdb\063\uffdb\001\002\000" +
    "\014\046\007\047\012\050\032\064\054\077\021\001\002" +
    "\000\004\022\171\001\002\000\004\017\172\001\002\000" +
    "\050\005\036\010\034\013\011\014\020\015\050\016\053" +
    "\017\026\020\173\023\027\027\045\037\033\045\042\046" +
    "\007\047\012\050\032\064\054\067\041\070\046\077\021" +
    "\001\002\000\010\020\uffd6\021\uffd6\063\uffd6\001\002\000" +
    "\050\005\036\010\034\013\011\014\020\015\050\016\053" +
    "\017\026\020\176\023\027\027\045\037\033\045\042\046" +
    "\007\047\012\050\032\064\054\067\041\070\046\077\021" +
    "\001\002\000\052\002\uffcc\005\uffcc\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\023\uffcc\027\uffcc" +
    "\037\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\064\uffcc\067" +
    "\uffcc\070\uffcc\077\uffcc\001\002\000\010\020\uffd7\021\uffd7" +
    "\063\uffd7\001\002\000\004\022\200\001\002\000\004\017" +
    "\201\001\002\000\050\005\036\010\034\013\011\014\020" +
    "\015\050\016\053\017\026\020\202\023\027\027\045\037" +
    "\033\045\042\046\007\047\012\050\032\064\054\067\041" +
    "\070\046\077\021\001\002\000\010\020\uffd9\021\uffd9\063" +
    "\uffd9\001\002\000\050\005\036\010\034\013\011\014\020" +
    "\015\050\016\053\017\026\020\204\023\027\027\045\037" +
    "\033\045\042\046\007\047\012\050\032\064\054\067\041" +
    "\070\046\077\021\001\002\000\010\020\uffda\021\uffda\063" +
    "\uffda\001\002\000\052\002\uffdd\005\uffdd\010\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\027" +
    "\uffdd\037\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\064\uffdd" +
    "\067\uffdd\070\uffdd\077\uffdd\001\002\000\010\020\uffdc\021" +
    "\uffdc\063\uffdc\001\002\000\026\005\036\017\026\037\033" +
    "\045\060\046\007\047\012\050\032\064\054\070\046\077" +
    "\021\001\002\000\026\005\036\017\026\037\033\045\060" +
    "\046\007\047\012\050\032\064\054\070\046\077\021\001" +
    "\002\000\026\005\036\017\026\037\033\045\060\046\007" +
    "\047\012\050\032\064\054\070\046\077\021\001\002\000" +
    "\026\005\036\017\026\037\033\045\060\046\007\047\012" +
    "\050\032\064\054\070\046\077\021\001\002\000\026\005" +
    "\036\017\026\037\033\045\060\046\007\047\012\050\032" +
    "\064\054\070\046\077\021\001\002\000\026\005\036\017" +
    "\026\037\033\045\060\046\007\047\012\050\032\064\054" +
    "\070\046\077\021\001\002\000\026\005\036\017\026\037" +
    "\033\045\060\046\007\047\012\050\032\064\054\070\046" +
    "\077\021\001\002\000\026\005\036\017\026\037\033\045" +
    "\060\046\007\047\012\050\032\064\054\070\046\077\021" +
    "\001\002\000\026\005\036\017\026\037\033\045\060\046" +
    "\007\047\012\050\032\064\054\070\046\077\021\001\002" +
    "\000\026\005\036\017\026\037\033\045\060\046\007\047" +
    "\012\050\032\064\054\070\046\077\021\001\002\000\026" +
    "\005\036\017\026\037\033\045\060\046\007\047\012\050" +
    "\032\064\054\070\046\077\021\001\002\000\052\006\uffb2" +
    "\007\uffb2\012\uffb2\020\uffb2\022\uffb2\025\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\207\066\uffb2\071\uffb2\001" +
    "\002\000\036\006\uffbc\007\uffbc\012\uffbc\020\uffbc\022\uffbc" +
    "\025\uffbc\026\uffbc\036\217\037\211\040\215\041\221\042" +
    "\207\066\uffbc\071\uffbc\001\002\000\052\006\uffb5\007\uffb5" +
    "\012\uffb5\020\uffb5\022\uffb5\025\uffb5\026\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\215\041\221\042\207\066\uffb5\071\uffb5\001\002\000" +
    "\036\006\uffb9\007\uffb9\012\uffb9\020\uffb9\022\uffb9\025\uffb9" +
    "\026\uffb9\036\217\037\211\040\215\041\221\042\207\066" +
    "\uffb9\071\uffb9\001\002\000\052\006\uffb3\007\uffb3\012\uffb3" +
    "\020\uffb3\022\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\207\066\uffb3\071\uffb3\001\002\000\036\006" +
    "\uffb7\007\uffb7\012\uffb7\020\uffb7\022\uffb7\025\uffb7\026\uffb7" +
    "\036\217\037\211\040\215\041\221\042\207\066\uffb7\071" +
    "\uffb7\001\002\000\036\006\uffb8\007\uffb8\012\uffb8\020\uffb8" +
    "\022\uffb8\025\uffb8\026\uffb8\036\217\037\211\040\215\041" +
    "\221\042\207\066\uffb8\071\uffb8\001\002\000\036\006\uffbb" +
    "\007\uffbb\012\uffbb\020\uffbb\022\uffbb\025\uffbb\026\uffbb\036" +
    "\217\037\211\040\215\041\221\042\207\066\uffbb\071\uffbb" +
    "\001\002\000\052\006\uffb4\007\uffb4\012\uffb4\020\uffb4\022" +
    "\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\215\041\221\042" +
    "\207\066\uffb4\071\uffb4\001\002\000\036\006\uffba\007\uffba" +
    "\012\uffba\020\uffba\022\uffba\025\uffba\026\uffba\036\217\037" +
    "\211\040\215\041\221\042\207\066\uffba\071\uffba\001\002" +
    "\000\052\006\uffb1\007\uffb1\012\uffb1\020\uffb1\022\uffb1\025" +
    "\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\066" +
    "\uffb1\071\uffb1\001\002\000\012\007\237\025\143\026\142" +
    "\066\144\001\002\000\052\002\uffde\005\uffde\010\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\023\uffde" +
    "\027\uffde\037\uffde\045\uffde\046\uffde\047\uffde\050\uffde\064" +
    "\uffde\067\uffde\070\uffde\077\uffde\001\002\000\052\002\uffdf" +
    "\005\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\023\uffdf\027\uffdf\037\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\064\uffdf\067\uffdf\070\uffdf\077\uffdf\001" +
    "\002\000\056\006\ufff2\007\ufff2\012\ufff2\020\ufff2\022\ufff2" +
    "\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\066\ufff2\071\ufff2\001\002\000\006\012" +
    "\157\071\242\001\002\000\056\006\ufff1\007\ufff1\012\ufff1" +
    "\020\ufff1\022\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\066\ufff1\071\ufff1\001" +
    "\002\000\024\006\uffbf\007\uffbf\012\uffbf\020\uffbf\022\uffbf" +
    "\025\uffbf\026\uffbf\066\uffbf\071\uffbf\001\002\000\030\005" +
    "\uffe5\017\uffe5\027\uffe5\037\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\064\uffe5\070\uffe5\077\uffe5\001\002\000\030\005" +
    "\uffe6\017\uffe6\027\uffe6\037\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\064\uffe6\070\uffe6\077\uffe6\001\002\000\030\005" +
    "\uffe4\017\uffe4\027\uffe4\037\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\064\uffe4\070\uffe4\077\uffe4\001\002\000\030\005" +
    "\uffe7\017\uffe7\027\uffe7\037\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\064\uffe7\070\uffe7\077\uffe7\001\002\000\030\005" +
    "\036\017\026\027\045\037\033\045\060\046\007\047\012" +
    "\050\032\064\054\070\046\077\021\001\002\000\060\007" +
    "\uffa6\011\253\025\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\051\065\066\uffa6\072\247" +
    "\073\245\074\244\075\246\001\002\000\030\005\036\017" +
    "\026\027\045\037\033\045\060\046\007\047\012\050\032" +
    "\064\054\070\046\077\021\001\002\000\030\005\uffe8\017" +
    "\uffe8\027\uffe8\037\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\064\uffe8\070\uffe8\077\uffe8\001\002\000\012\007\255\025" +
    "\143\026\142\066\144\001\002\000\052\002\uffec\005\uffec" +
    "\010\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\023\uffec\027\uffec\037\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\064\uffec\067\uffec\070\uffec\077\uffec\001\002\000" +
    "\030\005\036\017\026\027\045\037\033\045\060\046\007" +
    "\047\012\050\032\064\054\070\046\077\021\001\002\000" +
    "\012\007\260\025\143\026\142\066\144\001\002\000\052" +
    "\002\uffea\005\uffea\010\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\023\uffea\027\uffea\037\uffea\045\uffea" +
    "\046\uffea\047\uffea\050\uffea\064\uffea\067\uffea\070\uffea\077" +
    "\uffea\001\002\000\012\025\143\026\142\066\144\071\262" +
    "\001\002\000\060\007\uffa5\011\253\025\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\051" +
    "\063\066\uffa5\072\247\073\245\074\244\075\246\001\002" +
    "\000\060\007\uffa4\011\253\025\uffa4\026\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\051\065\066" +
    "\uffa4\072\247\073\245\074\244\075\246\001\002\000\030" +
    "\005\036\017\026\027\045\037\033\045\060\046\007\047" +
    "\012\050\032\064\054\070\046\077\021\001\002\000\012" +
    "\007\266\025\143\026\142\066\144\001\002\000\052\002" +
    "\uffeb\005\uffeb\010\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\023\uffeb\027\uffeb\037\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\064\uffeb\067\uffeb\070\uffeb\077\uffeb" +
    "\001\002\000\030\005\036\017\026\027\045\037\033\045" +
    "\060\046\007\047\012\050\032\064\054\070\046\077\021" +
    "\001\002\000\012\007\271\025\143\026\142\066\144\001" +
    "\002\000\052\002\uffe9\005\uffe9\010\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\023\uffe9\027\uffe9\037" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\064\uffe9\067\uffe9" +
    "\070\uffe9\077\uffe9\001\002\000\004\005\273\001\002\000" +
    "\006\006\276\010\275\001\002\000\006\006\305\012\304" +
    "\001\002\000\004\045\303\001\002\000\004\017\277\001" +
    "\002\000\050\005\036\010\034\013\011\014\020\015\050" +
    "\016\053\017\026\020\300\023\027\027\045\037\033\045" +
    "\042\046\007\047\012\050\032\064\054\067\041\070\046" +
    "\077\021\001\002\000\052\002\ufff9\005\ufff9\010\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9" +
    "\027\ufff9\037\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\064" +
    "\ufff9\067\ufff9\070\ufff9\077\ufff9\001\002\000\050\005\036" +
    "\010\034\013\011\014\020\015\050\016\053\017\026\020" +
    "\302\023\027\027\045\037\033\045\042\046\007\047\012" +
    "\050\032\064\054\067\041\070\046\077\021\001\002\000" +
    "\052\002\ufff7\005\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\023\ufff7\027\ufff7\037\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\064\ufff7\067\ufff7\070\ufff7" +
    "\077\ufff7\001\002\000\006\006\ufff5\012\ufff5\001\002\000" +
    "\004\010\312\001\002\000\004\017\306\001\002\000\050" +
    "\005\036\010\034\013\011\014\020\015\050\016\053\017" +
    "\026\020\307\023\027\027\045\037\033\045\042\046\007" +
    "\047\012\050\032\064\054\067\041\070\046\077\021\001" +
    "\002\000\052\002\ufffa\005\ufffa\010\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\027\ufffa\037" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\064\ufffa\067\ufffa" +
    "\070\ufffa\077\ufffa\001\002\000\050\005\036\010\034\013" +
    "\011\014\020\015\050\016\053\017\026\020\311\023\027" +
    "\027\045\037\033\045\042\046\007\047\012\050\032\064" +
    "\054\067\041\070\046\077\021\001\002\000\052\002\ufff8" +
    "\005\ufff8\010\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\023\ufff8\027\ufff8\037\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\064\ufff8\067\ufff8\070\ufff8\077\ufff8\001" +
    "\002\000\004\045\313\001\002\000\006\006\ufff6\012\ufff6" +
    "\001\002\000\052\002\uffc2\005\uffc2\010\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\023\uffc2\027\uffc2" +
    "\037\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\064\uffc2\067" +
    "\uffc2\070\uffc2\077\uffc2\001\002\000\012\006\316\025\143" +
    "\026\142\066\144\001\002\000\056\006\uffab\007\uffab\012" +
    "\uffab\020\uffab\022\uffab\025\uffab\026\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\066\uffab\071\uffab" +
    "\001\002\000\010\007\323\011\321\012\322\001\002\000" +
    "\010\007\uffe2\011\uffe2\012\uffe2\001\002\000\030\005\036" +
    "\017\026\027\045\037\033\045\060\046\007\047\012\050" +
    "\032\064\054\070\046\077\021\001\002\000\004\045\324" +
    "\001\002\000\052\002\ufff4\005\ufff4\010\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\023\ufff4\027\ufff4" +
    "\037\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\064\ufff4\067" +
    "\ufff4\070\ufff4\077\ufff4\001\002\000\010\007\uffe3\011\uffe3" +
    "\012\uffe3\001\002\000\012\007\326\025\143\026\142\066" +
    "\144\001\002\000\052\002\ufff3\005\ufff3\010\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\023\ufff3\027" +
    "\ufff3\037\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\064\ufff3" +
    "\067\ufff3\070\ufff3\077\ufff3\001\002\000\052\006\uffaf\007" +
    "\uffaf\012\uffaf\020\uffaf\022\uffaf\025\uffaf\026\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\066\uffaf\071\uffaf\001\002" +
    "\000\050\004\ufffd\005\ufffd\010\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\023\ufffd\027\ufffd\037\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\064\ufffd\067\ufffd\070\ufffd\077" +
    "\ufffd\001\002\000\050\002\uffff\005\036\010\034\013\011" +
    "\014\020\015\050\016\053\017\026\023\027\027\045\037" +
    "\033\045\042\046\007\047\012\050\032\064\054\067\041" +
    "\070\046\077\021\001\002\000\004\064\333\001\002\000" +
    "\004\006\334\001\002\000\004\007\335\001\002\000\050" +
    "\004\ufffb\005\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\023\ufffb\027\ufffb\037\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\064\ufffb\067\ufffb\070\ufffb\077\ufffb\001" +
    "\002\000\030\005\036\017\026\027\045\037\033\045\060" +
    "\046\007\047\012\050\032\064\054\070\046\077\021\001" +
    "\002\000\012\006\340\025\143\026\142\066\144\001\002" +
    "\000\004\017\341\001\002\000\050\005\036\010\034\013" +
    "\011\014\020\015\050\016\053\017\026\020\342\023\027" +
    "\027\045\037\033\045\042\046\007\047\012\050\032\064" +
    "\054\067\041\070\046\077\021\001\002\000\054\002\uffd5" +
    "\005\uffd5\010\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\023\uffd5\024\345\027\uffd5\037\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\064\uffd5\067\uffd5\070\uffd5\077" +
    "\uffd5\001\002\000\050\005\036\010\034\013\011\014\020" +
    "\015\050\016\053\017\026\020\344\023\027\027\045\037" +
    "\033\045\042\046\007\047\012\050\032\064\054\067\041" +
    "\070\046\077\021\001\002\000\054\002\uffd2\005\uffd2\010" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\023\uffd2\024\345\027\uffd2\037\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\064\uffd2\067\uffd2\070\uffd2\077\uffd2\001\002" +
    "\000\006\017\351\023\027\001\002\000\052\002\uffd1\005" +
    "\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\023\uffd1\027\uffd1\037\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\064\uffd1\067\uffd1\070\uffd1\077\uffd1\001\002" +
    "\000\052\002\uffd0\005\uffd0\010\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\023\uffd0\027\uffd0\037\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\064\uffd0\067\uffd0\070" +
    "\uffd0\077\uffd0\001\002\000\052\002\uffcf\005\uffcf\010\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\023" +
    "\uffcf\027\uffcf\037\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\064\uffcf\067\uffcf\070\uffcf\077\uffcf\001\002\000\050\005" +
    "\036\010\034\013\011\014\020\015\050\016\053\017\026" +
    "\020\352\023\027\027\045\037\033\045\042\046\007\047" +
    "\012\050\032\064\054\067\041\070\046\077\021\001\002" +
    "\000\052\002\uffce\005\uffce\010\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\023\uffce\027\uffce\037\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\064\uffce\067\uffce\070" +
    "\uffce\077\uffce\001\002\000\050\005\036\010\034\013\011" +
    "\014\020\015\050\016\053\017\026\020\354\023\027\027" +
    "\045\037\033\045\042\046\007\047\012\050\032\064\054" +
    "\067\041\070\046\077\021\001\002\000\052\002\uffcd\005" +
    "\uffcd\010\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\023\uffcd\027\uffcd\037\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\064\uffcd\067\uffcd\070\uffcd\077\uffcd\001\002" +
    "\000\052\002\uffd4\005\uffd4\010\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\023\uffd4\027\uffd4\037\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\064\uffd4\067\uffd4\070" +
    "\uffd4\077\uffd4\001\002\000\052\002\uffd3\005\uffd3\010\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\023" +
    "\uffd3\027\uffd3\037\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\064\uffd3\067\uffd3\070\uffd3\077\uffd3\001\002\000\056\006" +
    "\ufff0\007\ufff0\012\ufff0\020\ufff0\022\ufff0\025\ufff0\026\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\066\ufff0\071\ufff0\001\002\000\006\012\365\020\364\001" +
    "\002\000\004\022\362\001\002\000\030\005\036\017\026" +
    "\027\045\037\033\045\060\046\007\047\012\050\032\064" +
    "\054\070\046\077\021\001\002\000\014\012\uffed\020\uffed" +
    "\025\143\026\142\066\144\001\002\000\056\006\uffef\007" +
    "\uffef\012\uffef\020\uffef\022\uffef\025\uffef\026\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\066\uffef" +
    "\071\uffef\001\002\000\004\045\366\001\002\000\004\022" +
    "\367\001\002\000\030\005\036\017\026\027\045\037\033" +
    "\045\060\046\007\047\012\050\032\064\054\070\046\077" +
    "\021\001\002\000\014\012\uffee\020\uffee\025\143\026\142" +
    "\066\144\001\002\000\052\006\uffae\007\uffae\012\uffae\020" +
    "\uffae\022\uffae\025\uffae\026\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\066\uffae\071\uffae\001\002\000\052\006\uffad" +
    "\007\uffad\012\uffad\020\uffad\022\uffad\025\uffad\026\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\066\uffad\071\uffad\001" +
    "\002\000\052\002\uffe0\005\uffe0\010\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0\027\uffe0\037" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\064\uffe0\067\uffe0" +
    "\070\uffe0\077\uffe0\001\002\000\060\006\uffa2\007\uffa2\012" +
    "\uffa2\020\uffa2\022\uffa2\025\uffa2\026\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\051\065\066\uffa2" +
    "\071\uffa2\001\002\000\030\005\036\017\026\027\045\037" +
    "\033\045\060\046\007\047\012\050\032\064\054\070\046" +
    "\077\021\001\002\000\012\006\377\025\143\026\142\066" +
    "\144\001\002\000\004\007\u0100\001\002\000\052\002\uffe1" +
    "\005\uffe1\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\023\uffe1\027\uffe1\037\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\064\uffe1\067\uffe1\070\uffe1\077\uffe1\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\060\002\005\003\030\004\013\006\014\010" +
    "\003\011\022\012\012\013\004\014\050\016\043\017\034" +
    "\020\036\021\046\025\021\030\042\031\015\032\037\033" +
    "\007\034\051\035\054\036\023\037\024\043\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\006" +
    "\014\010\003\011\022\012\327\013\004\014\050\016\043" +
    "\017\034\020\036\021\046\025\021\030\330\031\015\032" +
    "\037\033\007\034\051\035\054\036\023\037\024\043\016" +
    "\001\001\000\002\001\001\000\014\010\003\011\022\036" +
    "\326\037\024\043\016\001\001\000\004\015\316\001\001" +
    "\000\002\001\001\000\024\010\003\011\022\032\314\033" +
    "\007\034\051\035\054\036\023\037\024\043\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\251\040\250\001\001\000\046\006\014\010\003" +
    "\011\022\013\004\014\050\016\043\017\034\020\036\021" +
    "\046\025\021\031\174\032\037\033\007\034\051\035\054" +
    "\036\023\037\024\043\016\001\001\000\002\001\001\000" +
    "\024\010\003\011\022\032\242\033\007\034\051\035\054" +
    "\036\023\037\024\043\016\001\001\000\026\010\003\011" +
    "\022\032\154\033\007\034\051\035\054\036\023\037\024" +
    "\042\240\043\016\001\001\000\002\001\001\000\024\010" +
    "\003\011\022\032\234\033\007\034\051\035\054\036\023" +
    "\037\024\043\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\003\011\022\032\056\033\007\034\051\035" +
    "\054\036\023\037\024\043\016\001\001\000\002\001\001" +
    "\000\004\040\063\001\001\000\026\010\003\011\022\032" +
    "\154\033\007\034\051\035\054\036\023\037\024\042\155" +
    "\043\016\001\001\000\024\010\003\011\022\032\140\033" +
    "\007\034\051\035\054\036\023\037\024\043\016\001\001" +
    "\000\006\041\137\043\071\001\001\000\002\001\001\000" +
    "\006\041\074\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\003\011\022\032\152\033\007\034\051" +
    "\035\054\036\023\037\024\043\016\001\001\000\024\010" +
    "\003\011\022\032\151\033\007\034\051\035\054\036\023" +
    "\037\024\043\016\001\001\000\024\010\003\011\022\032" +
    "\146\033\007\034\051\035\054\036\023\037\024\043\016" +
    "\001\001\000\004\040\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\003\011\022\032\150\033\007" +
    "\034\051\035\054\036\023\037\024\043\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\003\011\022\032\160\033\007\034\051\035\054\036\023" +
    "\037\024\043\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\163\023\165\024\164" +
    "\001\001\000\006\023\205\024\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\014\010\003\011" +
    "\022\013\004\014\050\016\043\017\034\020\036\021\046" +
    "\025\021\030\173\031\015\032\037\033\007\034\051\035" +
    "\054\036\023\037\024\043\016\001\001\000\002\001\001" +
    "\000\046\006\014\010\003\011\022\013\004\014\050\016" +
    "\043\017\034\020\036\021\046\025\021\031\174\032\037" +
    "\033\007\034\051\035\054\036\023\037\024\043\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\014\010\003\011\022\013" +
    "\004\014\050\016\043\017\034\020\036\021\046\025\021" +
    "\030\202\031\015\032\037\033\007\034\051\035\054\036" +
    "\023\037\024\043\016\001\001\000\002\001\001\000\046" +
    "\006\014\010\003\011\022\013\004\014\050\016\043\017" +
    "\034\020\036\021\046\025\021\031\174\032\037\033\007" +
    "\034\051\035\054\036\023\037\024\043\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\003\011\022\034\233\035\054\036\023\037\024\043" +
    "\016\001\001\000\020\010\003\011\022\034\232\035\054" +
    "\036\023\037\024\043\016\001\001\000\020\010\003\011" +
    "\022\034\231\035\054\036\023\037\024\043\016\001\001" +
    "\000\020\010\003\011\022\034\230\035\054\036\023\037" +
    "\024\043\016\001\001\000\020\010\003\011\022\034\227" +
    "\035\054\036\023\037\024\043\016\001\001\000\020\010" +
    "\003\011\022\034\226\035\054\036\023\037\024\043\016" +
    "\001\001\000\020\010\003\011\022\034\225\035\054\036" +
    "\023\037\024\043\016\001\001\000\020\010\003\011\022" +
    "\034\224\035\054\036\023\037\024\043\016\001\001\000" +
    "\020\010\003\011\022\034\223\035\054\036\023\037\024" +
    "\043\016\001\001\000\020\010\003\011\022\034\222\035" +
    "\054\036\023\037\024\043\016\001\001\000\020\010\003" +
    "\011\022\034\221\035\054\036\023\037\024\043\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\003\011\022\032\260\033\007\034\051\035\054\036" +
    "\023\037\024\043\016\001\001\000\004\005\255\001\001" +
    "\000\024\010\003\011\022\032\253\033\007\034\051\035" +
    "\054\036\023\037\024\043\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\003\011" +
    "\022\032\256\033\007\034\051\035\054\036\023\037\024" +
    "\043\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\263\040\262\001\001\000\004" +
    "\005\266\001\001\000\024\010\003\011\022\032\264\033" +
    "\007\034\051\035\054\036\023\037\024\043\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\003\011" +
    "\022\032\267\033\007\034\051\035\054\036\023\037\024" +
    "\043\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\014\010" +
    "\003\011\022\013\004\014\050\016\043\017\034\020\036" +
    "\021\046\025\021\030\300\031\015\032\037\033\007\034" +
    "\051\035\054\036\023\037\024\043\016\001\001\000\002" +
    "\001\001\000\046\006\014\010\003\011\022\013\004\014" +
    "\050\016\043\017\034\020\036\021\046\025\021\031\174" +
    "\032\037\033\007\034\051\035\054\036\023\037\024\043" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\014\010\003\011" +
    "\022\013\004\014\050\016\043\017\034\020\036\021\046" +
    "\025\021\030\307\031\015\032\037\033\007\034\051\035" +
    "\054\036\023\037\024\043\016\001\001\000\002\001\001" +
    "\000\046\006\014\010\003\011\022\013\004\014\050\016" +
    "\043\017\034\020\036\021\046\025\021\031\174\032\037" +
    "\033\007\034\051\035\054\036\023\037\024\043\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\003\011\022" +
    "\032\324\033\007\034\051\035\054\036\023\037\024\043" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\006\014\010\003\011\022" +
    "\013\004\014\050\016\043\017\034\020\036\021\046\025" +
    "\021\031\174\032\037\033\007\034\051\035\054\036\023" +
    "\037\024\043\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\003" +
    "\011\022\032\336\033\007\034\051\035\054\036\023\037" +
    "\024\043\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\014\010\003\011\022\013\004\014\050\016" +
    "\043\017\034\020\036\021\046\025\021\030\342\031\015" +
    "\032\037\033\007\034\051\035\054\036\023\037\024\043" +
    "\016\001\001\000\006\026\354\027\355\001\001\000\046" +
    "\006\014\010\003\011\022\013\004\014\050\016\043\017" +
    "\034\020\036\021\046\025\021\031\174\032\037\033\007" +
    "\034\051\035\054\036\023\037\024\043\016\001\001\000" +
    "\006\026\345\027\346\001\001\000\004\025\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\014\010\003\011\022\013\004\014\050\016\043" +
    "\017\034\020\036\021\046\025\021\030\352\031\015\032" +
    "\037\033\007\034\051\035\054\036\023\037\024\043\016" +
    "\001\001\000\002\001\001\000\046\006\014\010\003\011" +
    "\022\013\004\014\050\016\043\017\034\020\036\021\046" +
    "\025\021\031\174\032\037\033\007\034\051\035\054\036" +
    "\023\037\024\043\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\003\011\022\032\362" +
    "\033\007\034\051\035\054\036\023\037\024\043\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\003\011\022\032\367\033" +
    "\007\034\051\035\054\036\023\037\024\043\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\003\011\022" +
    "\032\375\033\007\034\051\035\054\036\023\037\024\043" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	/*---------------Metodo que se llamara cuando sea encontrado algun error-----------------------------*/
	public void syntax_error(Symbol s){
	   	System.out.println("Error Sintactico -> lexema: |" + s.value +  "| " + "  Columna: "+  s.right + "linea:  "+  (s.left + 1) );
	   	String error = "el token \"" + s.value + "\" no es valida ";
                ErrorEjecucion err = new ErrorEjecucion("Sintactico Fs:"+dir ,error,"sintactico","sintactico",(s.left + 1),s.right);
                Main.errores.add(err);							
	}
	/*-----------------------------metodo para cuando ya no se pueda recuperar los errores-------------------*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	    System.out.println("Error Sintactico No Recuperable-> lexema: |" + s.value + "| Linea: " + s.right + " Columna: " + s.left);
	}

	public NodoArbol getNodoRaiz(){
		return this.action_obj.raiz;
	}
	String dir = "";
	public void setDireccion(String dir1){

		 this.dir = dir1;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoFs$actions {


	NodoArbol raiz;
	String direccion = "";

  private final sintacticoFs parser;

  /** Constructor */
  CUP$sintacticoFs$actions(sintacticoFs parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoFs$do_action(
    int                        CUP$sintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFs$parser,
    java.util.Stack            CUP$sintacticoFs$stack,
    int                        CUP$sintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // S_LLAMADA_METODO ::= id parentesisa LISTA_PARAMETROS parentesisc 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADA_METODO,w,ConstantesFs.LLAMADA_METODO);
				RESULT.addHijos(t);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_LLAMADA_METODO",33, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // S_LLAMADA_METODO ::= id parentesisa parentesisc 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADA_METODO,w,ConstantesFs.LLAMADA_METODO);
				NodoArbol ab = new NodoArbol(ConstantesFs.LISTA_PARAMETROS);
				RESULT.addHijos(ab);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_LLAMADA_METODO",33, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA_PARAMETROS ::= OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
						RESULT = new NodoArbol(ConstantesFs.LISTA_PARAMETROS);
						RESULT.addHijos(t);
					
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
						RESULT = l;
						RESULT.addHijos(t);
					
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPCIONES_ID ::= id 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPCIONES_ID ::= S_LLAMADA_METODO 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPCIONES_ID ::= alguno parentesisa id parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,t,ConstantesFs.ALGUNO);
				RESULT.setPosicion(tleft, tright);

			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPCIONES_ID ::= todos parentesisa id parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,t,ConstantesFs.TODOS);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPCIONES_ID ::= reduce parentesisa id parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,t,ConstantesFs.REDUCE);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPCIONES_ID ::= map parentesisa id parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,t,ConstantesFs.MAP);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPCIONES_ID ::= buscar parentesisa id parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,t,ConstantesFs.BUSCAR);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPCIONES_ID ::= filter parentesisa id parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,t,ConstantesFs.FILTER);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPCIONES_ID ::= minimo parentesisa parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,ConstantesFs.MINIMO);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPCIONES_ID ::= maximo parentesisa parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,ConstantesFs.MAXIMO);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPCIONES_ID ::= invertir parentesisa parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,ConstantesFs.INVERTIR);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPCIONES_ID ::= ascendente parentesisa parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,ConstantesFs.ASCENDENTE);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPCIONES_ID ::= descendente parentesisa parentesisc 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.LLAMADAS_METODOS_NATIVOS,ConstantesFs.DESCENDENTE);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OPCIONES_ID",31, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA_OPCIONESID ::= punto OPCIONES_ID 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				  		RESULT = new NodoArbol(ConstantesFs.LISTA_PUNTO);
				  		RESULT.addHijos(t);
					
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONESID",30, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LISTA_OPCIONESID ::= LISTA_OPCIONESID punto OPCIONES_ID 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				   		RESULT = l;
				  		RESULT.addHijos(t);
					
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONESID",30, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TERMINALES_PUNTUALES ::= nulo 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.TIPO_NULL,"nulo",ConstantesFs.TIPO_NULL);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES_PUNTUALES",29, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TERMINALES_PUNTUALES ::= numero 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.NUMERO,t,ConstantesFs.TIPO_NUMERO);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES_PUNTUALES",29, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TERMINALES_PUNTUALES ::= t_false 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.BOOLEANO_FALSE,"false",ConstantesFs.TIPO_BOOLEANO);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES_PUNTUALES",29, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TERMINALES_PUNTUALES ::= t_true 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.BOOLEANO_TRUE,"true",ConstantesFs.TIPO_BOOLEANO);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES_PUNTUALES",29, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TERMINALES_PUNTUALES ::= cadena 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.CADENA,t,ConstantesFs.TIPO_CADENA);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES_PUNTUALES",29, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TERMINALES ::= S_LLAMADA_METODO LISTA_OPCIONESID 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol o = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
				RESULT.addHijos(o);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TERMINALES ::= S_LLAMADA_METODO 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TERMINALES ::= id corchetea OP_LOGICAS corchetec LISTA_OPCIONESID 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol t1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol o = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID_VECTOR);
				RESULT.addHijos(t1,o);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TERMINALES ::= id corchetea OP_LOGICAS corchetec 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol t1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID_VECTOR);
				RESULT.addHijos(t1);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TERMINALES ::= id LISTA_OPCIONESID 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol o = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID);
				RESULT.addHijos(o);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TERMINALES ::= id 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID);
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TERMINALES ::= TERMINALES_PUNTUALES 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TERMINALES ::= DECLA_OBJETO 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = n1;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TERMINALES ::= DECLA_VECTOR 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = n1;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TERMINALES ::= parentesisa OP_LOGICAS parentesisc 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = n1;
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TERMINALES",28, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_NEGATIVA ::= TERMINALES 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
            	RESULT = n1;
            
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_NEGATIVA",27, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_NEGATIVA ::= TERMINALES menosmenos 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
            	NodoArbol nodo1 = new NodoArbol(ConstantesFs.DISMINUCION);
				NodoArbol nodo2 = new NodoArbol(ConstantesFs.NUMERO,"1",ConstantesFs.TIPO_NUMERO);
				nodo1.addHijos(n1,nodo2);
            	RESULT = nodo1;
            	RESULT.setPosicion(n1left, n1right);
            
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_NEGATIVA",27, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_NEGATIVA ::= TERMINALES masmas 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
            	NodoArbol nodo1 = new NodoArbol(ConstantesFs.AUMENTO);
				NodoArbol nodo2 = new NodoArbol(ConstantesFs.NUMERO,"1",ConstantesFs.TIPO_NUMERO);
				nodo1.addHijos(n1,nodo2);
            	RESULT = nodo1;
            	RESULT.setPosicion(n1left, n1right);
            
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_NEGATIVA",27, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_NEGATIVA ::= menos TERMINALES 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				NodoArbol nodo1 = new NodoArbol(ConstantesFs.RESTA);
				NodoArbol nodo2 = new NodoArbol(ConstantesFs.NUMERO,"0",ConstantesFs.TIPO_NUMERO);
				nodo1.addHijos(nodo2);
				nodo1.addHijos(n1);
				RESULT = nodo1;
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_NEGATIVA",27, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ARISM ::= OP_NEGATIVA 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = n1;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ARISM",26, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ARISM ::= OP_ARISM potencia OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.POTENCIA);
				RESULT.addHijos(n1);
				RESULT.addHijos(n2);
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ARISM",26, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_ARISM ::= OP_ARISM dividir OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.DIVISION);
				RESULT.addHijos(n1);
				RESULT.addHijos(n2);
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ARISM",26, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_ARISM ::= OP_ARISM por OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.MULTIPLICACION);
				RESULT.addHijos(n1);
				RESULT.addHijos(n2);
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ARISM",26, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_ARISM ::= OP_ARISM menos OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.RESTA);
				RESULT.addHijos(n1);
				RESULT.addHijos(n2);
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ARISM",26, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_ARISM ::= OP_ARISM mas OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.SUMA);
				RESULT.addHijos(n1);
				RESULT.addHijos(n2);
				RESULT.setPosicion(n1left, n1right);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ARISM",26, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_REL ::= OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = n1;
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_REL ::= OP_ARISM diferente OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = new NodoArbol(ConstantesFs.DIFERENTE);
			RESULT.addHijos(n1);
			RESULT.addHijos(n2);
			RESULT.setPosicion(n1left, n1right);
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_REL ::= OP_ARISM igualigual OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = new NodoArbol(ConstantesFs.IGUALIGUAL);
			RESULT.addHijos(n1);
			RESULT.addHijos(n2);
			RESULT.setPosicion(n1left, n1right);
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_REL ::= OP_ARISM menorigual OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = new NodoArbol(ConstantesFs.MENORIGUALQ);
			RESULT.addHijos(n2);
			RESULT.addHijos(n1);
			RESULT.setPosicion(n1left, n1right);
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_REL ::= OP_ARISM mayorigual OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = new NodoArbol(ConstantesFs.MAYORIGUALQ);
			RESULT.addHijos(n1);
			RESULT.addHijos(n2);
			RESULT.setPosicion(n1left, n1right);
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_REL ::= OP_ARISM menorq OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = new NodoArbol(ConstantesFs.MENORQ);
			RESULT.addHijos(n1);
			RESULT.addHijos(n2);
			RESULT.setPosicion(n1left, n1right);
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_REL ::= OP_ARISM mayorq OP_ARISM 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        	RESULT = new NodoArbol(ConstantesFs.MAYORQ);
			RESULT.addHijos(n1);
			RESULT.addHijos(n2);
			RESULT.setPosicion(n1left, n1right);
        
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_REL",25, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_LOGICAS ::= OP_REL 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        		RESULT = n1;
        	
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_LOGICAS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_LOGICAS ::= OP_LOGICAS ternario OP_LOGICAS dospuntos OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n3 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        		RESULT = new NodoArbol(ConstantesFs.TERNARIO);
        		RESULT.addHijos(n1,n2,n3);
        		RESULT.setPosicion(n1left, n1right);
        	
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_LOGICAS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_LOGICAS ::= not OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        		RESULT = new NodoArbol(ConstantesFs.NOT);
        		RESULT.addHijos(n1);
        		RESULT.setPosicion(n1left, n1right);
        	
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_LOGICAS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_LOGICAS ::= OP_LOGICAS and OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        		RESULT = new NodoArbol(ConstantesFs.AND);
        		RESULT.addHijos(n1);
        		RESULT.addHijos(n2);
        		RESULT.setPosicion(n1left, n1right);
        	
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_LOGICAS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_LOGICAS ::= OP_LOGICAS or OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol n1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol n2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
        		RESULT = new NodoArbol(ConstantesFs.OR);
        		RESULT.addHijos(n1);
        		RESULT.addHijos(n2);
        		RESULT.setPosicion(n1left, n1right);
        	
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_LOGICAS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA ::= OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				NodoArbol a = new NodoArbol(ConstantesFs.LLAMADA_ID);
				a.addHijos(t);

				RESULT = a;
				RESULT.setPosicion(tleft, tright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA ::= METODO 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA ::= S_SI 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA ::= S_SELECCIONA 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= S_RETORNAR 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= S_DETENER 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= S_IMPRIMIR 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= S_ASIGNACION 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= S_DECLARACION 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = t;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = new NodoArbol(ConstantesFs.LISTA_SENTENCIAS);
					RESULT.addHijos(t);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol t = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = l;
					RESULT.addHijos(t);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SINO ::= sino llavea LISTA_SENTENCIAS llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI);
			NodoArbol nodosino = new NodoArbol(ConstantesFs.BOOLEANO_TRUE,"true",ConstantesFs.TIPO_BOOLEANO);
			RESULT.addHijos(nodosino,s);
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",21, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SINO ::= sino llavea llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI);
			NodoArbol nodosino = new NodoArbol(ConstantesFs.BOOLEANO_TRUE,"true",ConstantesFs.TIPO_BOOLEANO);
			RESULT.addHijos(nodosino,new NodoArbol(ConstantesFs.LISTA_SENTENCIAS));
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",21, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_SINO_SI ::= sino S_SI 
            {
              NodoArbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = s;
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_SINO_SI",20, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // S_SI ::= si parentesisa OP_LOGICAS parentesisc llavea LISTA_SENTENCIAS llavec SINO 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI_PADRE);
			NodoArbol nsi = new NodoArbol(ConstantesFs.SI);
			nsi.addHijos(e,s);
			RESULT.addHijos(nsi);
			RESULT.addHijos(ls);
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SI",19, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // S_SI ::= si parentesisa OP_LOGICAS parentesisc llavea LISTA_SENTENCIAS llavec LISTA_SINO_SI 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI_PADRE);
			NodoArbol nsi = new NodoArbol(ConstantesFs.SI);
			nsi.addHijos(e,s);
			RESULT.addHijos(nsi);
			RESULT.addTodosHijos(ls.getHijosNodo());
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SI",19, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // S_SI ::= si parentesisa OP_LOGICAS parentesisc llavea LISTA_SENTENCIAS llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI_PADRE);
			NodoArbol nsi = new NodoArbol(ConstantesFs.SI);
			nsi.addHijos(e,s);
			RESULT.addHijos(nsi);
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SI",19, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // S_SI ::= si parentesisa OP_LOGICAS parentesisc llavea llavec SINO 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI_PADRE);
			NodoArbol nsi = new NodoArbol(ConstantesFs.SI);
			nsi.addHijos(e,new NodoArbol(ConstantesFs.LISTA_SENTENCIAS));
			RESULT.addHijos(ls);;
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SI",19, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // S_SI ::= si parentesisa OP_LOGICAS parentesisc llavea llavec LISTA_SINO_SI 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI_PADRE);
			NodoArbol nsi = new NodoArbol(ConstantesFs.SI);
			nsi.addHijos(e,new NodoArbol(ConstantesFs.LISTA_SENTENCIAS));
			RESULT.addTodosHijos(ls.getHijosNodo());
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SI",19, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // S_SI ::= si parentesisa OP_LOGICAS parentesisc llavea llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		
			RESULT = new NodoArbol(ConstantesFs.SI_PADRE);
			NodoArbol nsi = new NodoArbol(ConstantesFs.SI);
			nsi.addHijos(e,new NodoArbol(ConstantesFs.LISTA_SENTENCIAS));
			RESULT.setPosicion(wleft, wright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SI",19, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASO_DEFECTO ::= defecto dospuntos llavea llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		
					NodoArbol sc = new NodoArbol(ConstantesFs.DEFECTO);
					RESULT = sc;
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",18, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASO_DEFECTO ::= defecto dospuntos llavea LISTA_SENTENCIAS llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					NodoArbol sc = new NodoArbol(ConstantesFs.DEFECTO);
					sc.addHijos(ls);
					RESULT = sc;
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",18, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // S_CASO ::= CASO_DEFECTO 
            {
              NodoArbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = e;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // S_CASO ::= caso TERMINALES_PUNTUALES dospuntos llavea llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol tp = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		
				NodoArbol sc = new NodoArbol(ConstantesFs.CASO);
				sc.addHijos(tp);
				RESULT = sc;
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // S_CASO ::= caso TERMINALES_PUNTUALES dospuntos llavea LISTA_SENTENCIAS llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol tp = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				NodoArbol sc = new NodoArbol(ConstantesFs.CASO);
				sc.addHijos(tp,ls);
				RESULT = sc;
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_CASOS ::= S_CASO 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				NodoArbol sc = new NodoArbol(ConstantesFs.CASOS);
				sc.addHijos(c);
				RESULT = sc;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_CASOS ::= LISTA_CASOS S_CASO 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				NodoArbol sc = l;
				sc.addHijos(c);
				RESULT = sc;
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // S_SELECCIONA ::= selecciona parentesisa OP_LOGICAS parentesisc llavea LISTA_CASOS llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol sc = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = new NodoArbol(ConstantesFs.SELECCIONA);
					RESULT.addHijos(e,sc);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // S_RETORNAR ::= retornar puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.RETORNAR);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_RETORNAR",14, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // S_RETORNAR ::= retornar OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.RETORNAR);
				RESULT.addHijos(e);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_RETORNAR",14, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S_DETENER ::= detener puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.DETENER);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_DETENER",13, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // S_IMPRIMIR ::= imprimir parentesisa OP_LOGICAS parentesisc puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
				RESULT = new NodoArbol(ConstantesFs.IMPRIMIR);
				RESULT.addHijos(e);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_IDS ::= id 
            {
              NodoArbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.LISTA_IDS);
				NodoArbol ab = new NodoArbol(ConstantesFs.ID,e,ConstantesFs.ID);
				ab.setPosicion(eleft, eright);
				RESULT.addHijos(ab);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",11, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_IDS ::= LISTA_IDS coma id 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = l;
				NodoArbol ab = new NodoArbol(ConstantesFs.ID,e,ConstantesFs.ID);
				ab.setPosicion(eleft, eright);
				RESULT.addHijos(ab);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",11, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_ASIGNACION ::= divigual 
            {
              Integer RESULT =null;
		
					RESULT = ConstantesFs.DIV_IGUAL;
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_ASIGNACION ::= porigual 
            {
              Integer RESULT =null;
		
					RESULT = ConstantesFs.POR_IGUAL;
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_ASIGNACION ::= menosigual 
            {
              Integer RESULT =null;
		
					RESULT = ConstantesFs.MENOS_IGUAL;
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_ASIGNACION ::= masigual 
            {
              Integer RESULT =null;
		
					RESULT = ConstantesFs.MAS_IGUAL;
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_ASIGNACION ::= igual 
            {
              Integer RESULT =null;
		
					RESULT = ConstantesFs.IGUAL;
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S_ASIGNACION ::= id corchetea OP_LOGICAS corchetec LISTA_OPCIONESID TIPO_ASIGNACION OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		NodoArbol pos = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol lo = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		Integer ta = (Integer)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.ASIGNACION);
				NodoArbol lAsig = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID_VECTOR);
				lAsig.addHijos(pos,lo);
				if (ta != ConstantesFs.IGUAL) {
	                NodoArbol tipo = new NodoArbol(ta);
	                NodoArbol var1 = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID);
					var1.setPosicion(taleft, taright);
					tipo.setPosicion(taleft, taright);
					tipo.addHijos(var1,e,lo);
					e = tipo;
                }
				RESULT.addHijos(lAsig,e);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S_ASIGNACION ::= id LISTA_OPCIONESID TIPO_ASIGNACION OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol lo = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		Integer ta = (Integer)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.ASIGNACION);
				NodoArbol lAsig = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID);
				lAsig.addHijos(lo);
				if (ta != ConstantesFs.IGUAL) {
	                NodoArbol tipo = new NodoArbol(ta);
	                NodoArbol var1 = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID);
					var1.setPosicion(taleft, taright);
					tipo.setPosicion(taleft, taright);
					tipo.addHijos(var1,e);
					e = tipo;
                }
                RESULT.addHijos(lAsig,e);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S_ASIGNACION ::= id corchetea OP_LOGICAS corchetec TIPO_ASIGNACION OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol pos = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		Integer ta = (Integer)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.ASIGNACION);
				NodoArbol lAsig = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID_VECTOR);
				lAsig.addHijos(pos);
				if (ta != ConstantesFs.IGUAL) {
	                NodoArbol tipo = new NodoArbol(ta);
	                NodoArbol var1 = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID);
					var1.setPosicion(taleft, taright);
					tipo.setPosicion(taleft, taright);
					tipo.addHijos(var1,e);
					e = tipo;
                }
				RESULT.addHijos(lAsig,e);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S_ASIGNACION ::= id TIPO_ASIGNACION OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		Integer ta = (Integer)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
				RESULT = new NodoArbol(ConstantesFs.ASIGNACION);
				NodoArbol lAsig = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID);
				lAsig.setPosicion(wleft, wright);
				if (ta != ConstantesFs.IGUAL) {
	                NodoArbol tipo = new NodoArbol(ta);
	                NodoArbol var1 = new NodoArbol(ConstantesFs.ID,w,ConstantesFs.ID);
					var1.setPosicion(taleft, taright);
					tipo.setPosicion(taleft, taright);
					tipo.addHijos(var1,e);
					e = tipo;
                }
                RESULT.addHijos(lAsig,e);
				RESULT.setPosicion(wleft, wright);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONT_OBJETO ::= id dospuntos OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = new NodoArbol(ConstantesFs.LISTA_PARAMETROS);
					NodoArbol elObj = new NodoArbol(ConstantesFs.ELEMENENTO_OBJETO,i);
					elObj.setPosicion(ileft, iright);
					elObj.addHijos(op);
						RESULT.addHijos(elObj);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("CONT_OBJETO",34, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONT_OBJETO ::= CONT_OBJETO coma id dospuntos OP_LOGICAS 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = l;
					NodoArbol elObj = new NodoArbol(ConstantesFs.ELEMENENTO_OBJETO,i);
					elObj.setPosicion(ileft, iright);
					elObj.addHijos(op);
						RESULT.addHijos(elObj);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("CONT_OBJETO",34, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA_OBJETO ::= llavea CONT_OBJETO llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = e;
					RESULT.setConstEtiqueta(ConstantesFs.OBJETO_DECLARAR);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLA_OBJETO",7, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLA_OBJETO ::= llavea llavec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = new NodoArbol(ConstantesFs.OBJETO_DECLARAR);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLA_OBJETO",7, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLA_VECTOR ::= corchetea LISTA_PARAMETROS corchetec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = e;
					RESULT.setConstEtiqueta(ConstantesFs.VECTOR_DECLARAR);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLA_VECTOR",6, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLA_VECTOR ::= corchetea corchetec 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = new NodoArbol(ConstantesFs.VECTOR_DECLARAR);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLA_VECTOR",6, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S_DECLARACION ::= var LISTA_IDS igual OP_LOGICAS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = new NodoArbol(ConstantesFs.DECLARAR);
					RESULT.addHijos(l,e);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_DECLARACION",9, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S_DECLARACION ::= var LISTA_IDS puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
					RESULT = new NodoArbol(ConstantesFs.DECLARAR);
					RESULT.addHijos(l);
					RESULT.setPosicion(wleft, wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_DECLARACION",9, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_VARS ::= var id 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.LISTA_PARAMETROS);
				NodoArbol abc = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID);
				abc.setPosicion(tleft,tright);
				RESULT.addHijos(abc);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_VARS",5, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_VARS ::= LISTA_VARS coma var id 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = l;
				NodoArbol abc = new NodoArbol(ConstantesFs.ID,t,ConstantesFs.ID);
				abc.setPosicion(tleft,tright);
				RESULT.addHijos(abc);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_VARS",5, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METODO ::= funcion id parentesisa parentesisc llavea LISTA_SENTENCIAS llavec 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
			RESULT = new NodoArbol(ConstantesFs.FUNCION,w,ConstantesFs.ID);
			NodoArbol ab = new NodoArbol(ConstantesFs.LISTA_PARAMETROS);
			RESULT.addHijos(ab,ls);
			RESULT.setPosicion(tleft,tright);

		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= funcion id parentesisa LISTA_VARS parentesisc llavea LISTA_SENTENCIAS llavec 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		NodoArbol lv = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		
			RESULT = new NodoArbol(ConstantesFs.FUNCION,w,ConstantesFs.ID);
			NodoArbol ab = lv;
			RESULT.addHijos(ab,ls);
			RESULT.setPosicion(tleft,tright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= funcion id parentesisa parentesisc llavea llavec 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		
			RESULT = new NodoArbol(ConstantesFs.FUNCION,w,ConstantesFs.ID);
			NodoArbol ab = new NodoArbol(ConstantesFs.LISTA_PARAMETROS);
			NodoArbol ls = new NodoArbol(ConstantesFs.LISTA_SENTENCIAS);
			RESULT.addHijos(ab,ls);
			RESULT.setPosicion(tleft,tright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= funcion id parentesisa LISTA_VARS parentesisc llavea llavec 
            {
              NodoArbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).right;
		NodoArbol lv = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-3)).value;
		
			RESULT = new NodoArbol(ConstantesFs.FUNCION,w,ConstantesFs.ID);
			NodoArbol ab = lv;
			NodoArbol ls = new NodoArbol(ConstantesFs.LISTA_SENTENCIAS);
			RESULT.addHijos(ab,ls);
			RESULT.setPosicion(tleft,tright);
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S_IMPORTAR ::= importar parentesisa cadena parentesisc puntoycoma 
            {
              NodoArbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-2)).value;
		
					RESULT = new NodoArbol(ConstantesFs.IMPORTAR,e);
					RESULT.setPosicion(wleft,wright);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("S_IMPORTAR",8, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_IMPORTAR ::= S_IMPORTAR 
            {
              NodoArbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = new NodoArbol(ConstantesFs.LISTA_IMPORTAR);
					RESULT.addHijos(e);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_IMPORTAR",1, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_IMPORTAR ::= LISTA_IMPORTAR S_IMPORTAR 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
					RESULT = l;
					RESULT.addHijos(e);
				
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("LISTA_IMPORTAR",1, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DOCUMENTO ::= LISTA_SENTENCIAS 
            {
              NodoArbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.DOCUMENTO);
				NodoArbol ab = new NodoArbol(ConstantesFs.LISTA_IMPORTAR);
				RESULT.addHijos(ab,e);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",2, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DOCUMENTO ::= LISTA_IMPORTAR LISTA_SENTENCIAS 
            {
              NodoArbol RESULT =null;
		int ableft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int abright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		NodoArbol ab = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol e = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
				RESULT = new NodoArbol(ConstantesFs.DOCUMENTO);
				RESULT.addHijos(ab,e);
			
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",2, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= DOCUMENTO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.peek()).value;
		
			raiz = b;
		
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          return CUP$sintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.elementAt(CUP$sintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFs$parser.done_parsing();
          return CUP$sintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

