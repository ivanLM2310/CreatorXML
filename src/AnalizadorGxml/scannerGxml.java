/* The following code was generated by JFlex 1.6.1 */

package AnalizadorGxml;

import java_cup.runtime.Symbol;
import creatorxml.Main;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexicoGxml.jflex</tt>
 */
public class scannerGxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PALABRASTAG = 2;
  public static final int PALABRASFINALESTAG = 4;
  public static final int NUMERALTAG = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\46\1\51\1\47\1\47\22\0\1\47\1\0\1\41"+
    "\1\44\1\45\10\0\1\26\1\34\1\30\12\33\2\0\1\27\1\32"+
    "\1\31\2\0\1\7\1\22\1\13\1\14\1\11\1\20\1\25\1\24"+
    "\1\36\2\35\1\16\1\2\1\12\1\4\1\3\1\35\1\5\1\37"+
    "\1\6\1\21\1\10\1\35\1\15\1\23\1\35\4\0\1\40\1\0"+
    "\1\7\1\22\1\13\1\14\1\11\1\20\1\25\1\24\1\36\2\35"+
    "\1\16\1\2\1\12\1\4\1\3\1\35\1\5\1\37\1\6\1\21"+
    "\1\10\1\35\1\15\1\23\1\35\1\42\1\0\1\43\7\0\1\51"+
    "\53\0\1\35\21\0\1\35\154\0\2\1\115\0\1\17\u1e98\0\1\35"+
    "\17\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\13\7\1\10\3\7\1\11\1\12\1\13\1\14\1\7"+
    "\3\3\10\7\1\15\1\7\1\1\1\16\1\17\2\0"+
    "\1\20\1\0\5\7\1\0\17\7\1\0\4\7\1\0"+
    "\1\7\1\20\1\0\1\21\1\0\1\22\1\0\7\7"+
    "\1\0\3\7\1\0\1\17\3\0\5\7\1\0\1\23"+
    "\20\7\1\0\6\7\1\0\7\7\1\0\3\7\1\24"+
    "\3\0\3\7\1\25\1\7\1\26\1\7\1\26\1\7"+
    "\1\0\1\7\1\27\3\7\1\0\5\7\1\0\1\7"+
    "\1\30\1\7\1\0\1\7\1\0\5\7\1\0\3\7"+
    "\1\0\2\7\1\31\1\7\1\0\3\7\3\0\1\7"+
    "\1\0\3\7\1\32\1\33\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\3\7\1\34\1\0\2\7\1\0"+
    "\1\7\2\35\1\7\1\36\1\37\1\7\2\0\1\7"+
    "\1\40\1\7\1\0\4\7\1\0\1\7\1\41\1\7"+
    "\1\0\1\42\2\43\1\0\1\7\1\42\1\7\2\44"+
    "\1\0\2\7\2\45\1\46\1\0\3\7\1\0\2\7"+
    "\1\0\1\7\1\47\1\7\2\0\2\7\2\50\3\7"+
    "\1\0\2\7\2\0\2\7\2\0\2\7\1\0\1\7"+
    "\1\51\2\52\1\53\1\7\2\54\1\55\1\0\2\7"+
    "\2\0\1\7\1\56\1\57\1\7\1\60\1\0\2\7"+
    "\1\61\1\0\2\7\2\0\2\7\1\0\2\7\1\0"+
    "\1\7\1\61\1\62\1\0\2\7\1\0\1\7\1\62"+
    "\1\0\1\7\1\0\1\7\2\0\2\7\1\0\1\63"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\64"+
    "\2\65\2\0\2\7\1\0\1\66\2\67\2\70\1\71"+
    "\2\72\1\0\2\73\1\7\2\0\1\7\1\0\2\74"+
    "\4\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\374\0\374\0\374\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8"+
    "\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u01ce"+
    "\0\u0348\0\u0372\0\u039c\0\u01ce\0\374\0\374\0\u03c6\0\u03f0"+
    "\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540"+
    "\0\u056a\0\u0594\0\u05be\0\374\0\u05e8\0\u0612\0\374\0\u063c"+
    "\0\u0666\0\u0690\0\374\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02"+
    "\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52"+
    "\0\u01ce\0\u041a\0\374\0\u0444\0\374\0\u0b7c\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\374\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u01ce\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c"+
    "\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac"+
    "\0\374\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u01ce"+
    "\0\u15d2\0\374\0\u15fc\0\u01ce\0\u1626\0\u1650\0\u167a\0\u01ce"+
    "\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca"+
    "\0\u17f4\0\u181e\0\u1848\0\u01ce\0\u1872\0\u189c\0\u18c6\0\u18f0"+
    "\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40"+
    "\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u01ce\0\u1b12\0\u1b3c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6"+
    "\0\u1ce0\0\u1d0a\0\u01ce\0\u01ce\0\u1d34\0\u1d5e\0\u1d88\0\u1db2"+
    "\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02"+
    "\0\u01ce\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\374\0\u01ce"+
    "\0\u1ffe\0\u01ce\0\u01ce\0\u2028\0\u2052\0\u207c\0\u20a6\0\u01ce"+
    "\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6"+
    "\0\u01ce\0\u2220\0\u224a\0\374\0\374\0\u01ce\0\u2274\0\u229e"+
    "\0\u01ce\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\374"+
    "\0\u01ce\0\u01ce\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496"+
    "\0\u24c0\0\u24ea\0\u2514\0\u01ce\0\u253e\0\u2568\0\u2592\0\u25bc"+
    "\0\u25e6\0\374\0\u01ce\0\u2610\0\u263a\0\u2664\0\u268e\0\u26b8"+
    "\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a\0\u27b4\0\u27de\0\u2808"+
    "\0\u2832\0\u285c\0\u2886\0\u01ce\0\374\0\u01ce\0\u01ce\0\u28b0"+
    "\0\374\0\u01ce\0\u01ce\0\u28da\0\u2904\0\u292e\0\u2958\0\u2982"+
    "\0\u29ac\0\u01ce\0\u01ce\0\u29d6\0\u01ce\0\u2a00\0\u2a2a\0\u2a54"+
    "\0\374\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a"+
    "\0\u2ba4\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u01ce\0\374\0\u2c76"+
    "\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\u01ce\0\u2d48\0\u2d72\0\u2d9c"+
    "\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44\0\u2e6e\0\u2e98\0\u01ce\0\u2ec2"+
    "\0\u2eec\0\u2f16\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8\0\374"+
    "\0\u01ce\0\374\0\u01ce\0\u3012\0\u303c\0\u3066\0\u3090\0\u30ba"+
    "\0\u01ce\0\374\0\u01ce\0\374\0\u01ce\0\u01ce\0\374\0\u01ce"+
    "\0\u30e4\0\374\0\u01ce\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6"+
    "\0\374\0\u01ce\0\u31e0\0\u320a\0\u3234\0\u325e\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\27\5\1\6\1\5\1\7\12\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\5\1\7\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\17\1\33\1\34\2\17"+
    "\3\7\1\35\1\36\1\37\1\7\1\17\1\40\1\17"+
    "\1\7\1\41\1\42\3\7\1\11\1\12\1\13\1\0"+
    "\1\7\1\43\1\44\3\17\1\45\1\17\1\46\1\47"+
    "\1\17\1\50\1\51\1\17\1\52\1\7\2\17\1\53"+
    "\3\17\3\7\1\54\3\7\1\17\1\55\1\17\6\7"+
    "\1\11\1\12\1\13\1\0\46\7\1\11\1\12\1\13"+
    "\1\0\27\56\1\0\1\56\1\0\12\56\1\0\5\56"+
    "\30\0\1\57\137\0\1\60\1\61\6\0\1\62\11\0"+
    "\1\63\36\0\1\64\5\17\1\65\7\17\1\0\1\17"+
    "\1\66\4\17\5\0\1\17\1\0\1\17\1\67\2\17"+
    "\13\0\5\17\1\70\7\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\15\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\7\17\1\71\5\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\12\0\1\72\5\17\1\73"+
    "\1\17\1\74\5\17\1\0\6\17\5\0\1\17\1\0"+
    "\1\17\1\75\2\17\13\0\10\17\1\76\1\77\2\17"+
    "\1\100\1\0\1\17\1\101\4\17\5\0\1\17\1\0"+
    "\4\17\13\0\7\17\1\102\5\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\10\17\1\103\4\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\2\17\1\104"+
    "\4\17\1\105\5\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\2\17\1\106\12\17\1\0\1\17\1\107"+
    "\4\17\5\0\1\17\1\0\4\17\13\0\5\17\1\110"+
    "\1\17\1\111\5\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\12\0\1\112\15\17\1\0\6\17\5\0\1\17"+
    "\1\0\1\17\1\113\2\17\13\0\5\17\1\114\7\17"+
    "\1\0\1\17\1\115\4\17\5\0\1\17\1\0\4\17"+
    "\13\0\2\17\1\116\12\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\44\0\1\37\1\117\17\0\1\120\11\17"+
    "\1\121\2\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\11\0\41\122\1\123\10\122\43\124\1\125\6\124\2\0"+
    "\1\126\51\0\15\17\1\0\1\17\1\127\4\17\5\0"+
    "\1\17\1\0\4\17\13\0\7\17\1\130\5\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\7\17\1\131"+
    "\5\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\10\17\1\132\4\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\2\17\1\133\12\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\5\17\1\134\1\17\1\135"+
    "\5\17\1\0\6\17\5\0\1\17\1\0\4\17\12\0"+
    "\1\136\15\17\1\0\6\17\5\0\1\17\1\0\1\17"+
    "\1\137\2\17\13\0\2\17\1\140\12\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\1\141\14\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\11\0\27\56\1\0"+
    "\1\56\1\0\12\56\1\142\5\56\46\60\1\143\3\60"+
    "\45\61\1\144\4\61\3\0\1\145\60\0\1\146\41\0"+
    "\13\17\1\147\1\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\14\17\1\150\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\10\17\1\151\4\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\4\17\1\152\10\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\15\17"+
    "\1\0\1\153\5\17\5\0\1\17\1\0\4\17\14\0"+
    "\1\154\50\0\1\155\14\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\13\17\1\156\1\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\1\17\1\157\13\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\11\17"+
    "\1\160\3\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\11\17\1\161\3\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\4\17\1\162\10\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\4\17\1\163\10\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\3\17"+
    "\1\164\4\17\1\165\4\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\6\17\1\166\6\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\1\167\14\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\15\17\1\0"+
    "\5\17\1\170\5\0\1\17\1\0\4\17\13\0\10\17"+
    "\1\171\3\17\1\172\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\3\17\1\173\11\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\4\17\1\174\10\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\15\17\1\0"+
    "\1\175\5\17\5\0\1\17\1\0\4\17\30\0\1\176"+
    "\17\0\1\176\14\0\15\17\1\176\6\17\5\0\1\17"+
    "\1\0\2\17\1\177\1\17\13\0\14\17\1\200\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\7\17\1\201"+
    "\5\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\3\17\1\202\1\203\10\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\44\0\1\37\20\0\1\17\1\204\13\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\14\0\1\205"+
    "\50\0\14\17\1\206\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\13\17\1\207\1\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\10\17\1\210\4\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\6\17\1\211"+
    "\6\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\10\17\1\212\4\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\4\17\1\213\10\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\15\17\1\0\1\214\5\17"+
    "\5\0\1\17\1\0\4\17\30\0\1\215\17\0\1\215"+
    "\14\0\15\17\1\215\6\17\5\0\1\17\1\0\2\17"+
    "\1\216\1\17\13\0\4\17\1\217\10\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\1\17\1\220\13\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\11\0\27\5"+
    "\1\0\14\5\2\0\4\5\44\61\1\221\1\144\4\61"+
    "\4\0\1\222\46\0\1\223\34\0\1\223\14\0\1\224"+
    "\15\17\1\0\6\17\5\0\1\17\1\0\1\17\1\225"+
    "\2\17\13\0\4\17\1\226\10\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\12\0\1\223\15\17\1\0\6\17"+
    "\5\0\1\17\1\0\1\17\1\227\2\17\13\0\15\17"+
    "\1\0\4\17\1\230\1\17\5\0\1\17\1\0\4\17"+
    "\13\0\7\17\1\231\5\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\15\0\1\232\47\0\4\17\1\233\10\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\2\17"+
    "\1\234\12\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\15\17\1\0\4\17\1\235\1\17\5\0\1\17"+
    "\1\0\4\17\12\0\1\236\15\17\1\0\6\17\5\0"+
    "\1\17\1\0\1\17\1\237\2\17\13\0\2\17\1\240"+
    "\12\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\2\17\1\241\12\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\12\17\1\242\2\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\4\17\1\243\10\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\12\0\1\244\15\17"+
    "\1\0\6\17\5\0\1\17\1\0\1\17\1\245\2\17"+
    "\13\0\15\17\1\0\2\17\1\246\3\17\5\0\1\17"+
    "\1\0\4\17\13\0\3\17\1\247\11\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\4\17\1\250\10\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\2\17"+
    "\1\251\12\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\15\17\1\252\6\17\5\0\1\17\1\0\2\17"+
    "\1\253\1\17\13\0\2\17\1\254\12\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\7\17\1\255\5\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\17\0\1\256"+
    "\45\0\4\17\1\257\10\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\15\17\1\260\6\17\5\0\1\17"+
    "\1\0\2\17\1\261\1\17\13\0\10\17\1\262\4\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\12\17"+
    "\1\263\2\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\2\17\1\264\12\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\2\17\1\265\12\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\15\0\1\266\47\0\4\17"+
    "\1\267\10\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\4\17\1\270\10\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\4\17\1\271\10\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\12\0\1\272\15\17\1\0"+
    "\6\17\5\0\1\17\1\0\1\17\1\273\2\17\13\0"+
    "\4\17\1\274\10\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\2\17\1\275\12\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\7\17\1\276\5\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\17\0\1\277\45\0"+
    "\4\17\1\300\10\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\2\17\1\301\12\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\2\17\1\302\12\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\16\0\1\303\46\0"+
    "\1\304\51\0\1\305\51\0\1\306\14\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\12\0\1\307\15\17\1\0"+
    "\6\17\5\0\1\17\1\0\1\17\1\310\2\17\13\0"+
    "\1\311\14\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\3\17\1\312\11\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\2\17\1\313\12\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\2\17\1\314\12\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\15\0\1\315"+
    "\47\0\2\17\1\316\12\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\15\17\1\0\6\17\1\317\4\0"+
    "\1\17\1\0\4\17\13\0\5\17\1\320\7\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\5\17\1\321"+
    "\7\17\1\0\6\17\5\0\1\17\1\0\4\17\20\0"+
    "\1\322\44\0\5\17\1\323\7\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\3\17\1\324\11\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\12\0\1\325\15\17"+
    "\1\0\6\17\5\0\1\17\1\0\1\17\1\326\2\17"+
    "\13\0\3\17\1\327\3\17\1\330\5\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\3\17\1\331\11\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\12\0\1\332"+
    "\34\0\1\332\14\0\1\332\15\17\1\0\6\17\5\0"+
    "\1\17\1\0\1\17\1\333\2\17\13\0\11\17\1\334"+
    "\3\17\1\0\6\17\5\0\1\17\1\0\4\17\20\0"+
    "\1\335\44\0\5\17\1\336\7\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\15\0\1\337\47\0\2\17\1\340"+
    "\12\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\4\17\1\341\10\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\7\17\1\342\5\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\10\17\1\343\4\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\3\17\1\344"+
    "\11\17\1\0\6\17\5\0\1\17\1\0\4\17\16\0"+
    "\1\345\45\0\1\346\15\17\1\0\6\17\5\0\1\17"+
    "\1\0\1\17\1\347\2\17\13\0\2\17\1\350\12\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\5\17"+
    "\1\351\7\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\20\0\1\352\44\0\5\17\1\353\7\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\3\17\1\354\3\17"+
    "\1\355\5\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\11\17\1\356\3\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\20\0\1\357\44\0\5\17\1\360\7\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\10\17"+
    "\1\361\4\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\13\0\3\17\1\362\11\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\17\0\1\363\47\0\1\364\51\0\1\365"+
    "\47\0\2\17\1\366\12\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\1\367\51\0\1\370\14\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\2\17\1\371"+
    "\12\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\7\17\1\372\5\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\23\0\1\373\41\0\10\17\1\374\4\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\16\0\1\375\46\0"+
    "\12\17\1\376\2\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\10\17\1\377\4\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\16\0\1\u0100\46\0\3\17\1\u0101"+
    "\11\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\7\17\1\u0102\5\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\17\0\1\u0103\45\0\4\17\1\u0104\10\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\2\17\1\u0105"+
    "\12\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\10\17\1\u0106\4\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\21\0\1\u0107\43\0\6\17\1\u0108\6\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\4\17\1\u0109"+
    "\10\17\1\0\6\17\5\0\1\17\1\0\4\17\25\0"+
    "\1\u010a\37\0\12\17\1\u010b\2\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\7\17\1\u010c\5\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\13\0\4\17\1\u010d"+
    "\10\17\1\0\6\17\5\0\1\17\1\0\4\17\17\0"+
    "\1\u010e\45\0\1\u010f\51\0\1\u0110\14\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\10\17\1\u0111\4\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\16\0\1\u0112"+
    "\46\0\3\17\1\u0113\11\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\2\17\1\u0114\12\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\10\17\1\u0115\4\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\13\0\4\17"+
    "\1\u0116\10\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\25\0\1\u0117\37\0\12\17\1\u0118\2\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\4\17\1\u0119\10\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\20\0\1\u011a"+
    "\53\0\1\u011b\42\0\7\17\1\u011c\5\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\10\17\1\u011d\4\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\12\0\1\u011e"+
    "\16\0\1\u011f\15\0\1\u011e\14\0\1\u011e\15\17\1\0"+
    "\1\u0120\5\17\5\0\1\17\1\0\1\17\1\u0121\2\17"+
    "\22\0\1\u0122\42\0\7\17\1\u0123\5\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\5\17\1\u0124\7\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\20\0\1\u0125"+
    "\44\0\5\17\1\u0126\7\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\14\17\1\u0127\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\7\17\1\u0128\5\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\20\0\1\u0129\44\0"+
    "\5\17\1\u012a\7\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\2\17\1\u012b\12\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\20\0\1\u012c\44\0\5\17\1\u012d"+
    "\7\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\5\17\1\u012e\7\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\20\0\1\u012f\53\0\1\u0130\42\0\7\17\1\u0131"+
    "\5\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\5\17\1\u0132\7\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\14\17\1\u0133\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\7\17\1\u0134\5\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\13\0\2\17\1\u0135\12\17"+
    "\1\0\6\17\5\0\1\17\1\0\4\17\20\0\1\u0136"+
    "\44\0\5\17\1\u0137\7\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\5\17\1\u0138\7\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\16\0\1\u0139\60\0\1\u013a"+
    "\37\0\12\17\1\u013b\2\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\11\17\1\u013c\3\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\23\0\1\u013d\40\0\1\u013e"+
    "\34\0\1\u013e\14\0\1\u013e\15\17\1\0\6\17\5\0"+
    "\1\17\1\0\1\17\1\u013f\2\17\13\0\10\17\1\u0140"+
    "\4\17\1\0\6\17\5\0\1\17\1\0\4\17\14\0"+
    "\1\u0141\50\0\3\17\1\u0142\11\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\12\17\1\u0143\2\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\17\0\1\u0144\45\0"+
    "\4\17\1\u0145\10\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\3\17\1\u0146\11\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\16\0\1\u0147\60\0\1\u0148\37\0"+
    "\12\17\1\u0149\2\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\13\0\12\17\1\u014a\2\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\17\0\1\u014b\45\0\4\17\1\u014c"+
    "\10\17\1\0\6\17\5\0\1\17\1\0\4\17\13\0"+
    "\3\17\1\u014d\11\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\12\0\1\u014e\34\0\1\u014e\14\0\1\u014e\15\17"+
    "\1\0\6\17\5\0\1\17\1\0\1\17\1\u014f\2\17"+
    "\12\0\1\u0150\15\17\1\0\6\17\5\0\1\17\1\0"+
    "\1\17\1\u0151\2\17\12\0\1\u0152\34\0\1\u0152\25\0"+
    "\1\u0153\41\0\10\17\1\u0154\4\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\12\0\1\u0152\15\17\1\0\6\17"+
    "\5\0\1\17\1\0\1\17\1\u0155\2\17\16\0\1\u0156"+
    "\46\0\2\17\1\u0157\12\17\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\13\0\2\17\1\u0158\12\17\1\0\6\17"+
    "\5\0\1\17\1\0\4\17\15\0\1\u0159\47\0\2\17"+
    "\1\u015a\12\17\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\12\0\1\u015b\34\0\1\u015b\14\0\1\u015b\15\17\1\0"+
    "\6\17\5\0\1\17\1\0\1\17\1\u015c\2\17\13\0"+
    "\2\17\1\u015d\12\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\15\0\1\u015e\47\0\2\17\1\u015f\12\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\20\0\1\u0160\44\0"+
    "\5\17\1\u0161\7\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\20\0\1\u0162\44\0\5\17\1\u0163\7\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\24\0\1\u0164\45\0"+
    "\1\u0165\44\0\5\17\1\u0166\7\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\11\17\1\u0167\3\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\15\0\1\u0168\47\0"+
    "\3\17\1\u0169\11\17\1\0\6\17\5\0\1\17\1\0"+
    "\4\17\30\0\1\u016a\17\0\1\u016a\14\0\15\17\1\u016a"+
    "\6\17\5\0\1\17\1\0\2\17\1\u016b\1\17\20\0"+
    "\1\u016c\44\0\5\17\1\u016d\7\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\13\0\3\17\1\u016e\11\17\1\0"+
    "\6\17\5\0\1\17\1\0\4\17\30\0\1\u016f\17\0"+
    "\1\u016f\14\0\15\17\1\u016f\6\17\5\0\1\17\1\0"+
    "\2\17\1\u0170\1\17\12\0\1\u0171\34\0\1\u0171\31\0"+
    "\1\u0172\35\0\14\17\1\u0173\1\0\6\17\5\0\1\17"+
    "\1\0\4\17\12\0\1\u0171\15\17\1\0\6\17\5\0"+
    "\1\17\1\0\1\17\1\u0174\2\17\25\0\1\u0175\44\0"+
    "\1\u0176\44\0\5\17\1\u0177\7\17\1\0\6\17\5\0"+
    "\1\17\1\0\4\17\32\0\1\u0178\46\0\1\u0179\35\0"+
    "\14\17\1\u017a\1\0\6\17\5\0\1\17\1\0\4\17"+
    "\24\0\1\u017b\51\0\1\u017c\37\0\1\u017d\34\0\1\u017d"+
    "\17\0\1\u017e\57\0\1\u017f\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\1\1\3\11\21\1\2\11\15\1"+
    "\1\11\2\1\1\11\1\1\2\0\1\11\1\0\5\1"+
    "\1\0\17\1\1\0\4\1\1\0\2\1\1\0\1\11"+
    "\1\0\1\11\1\0\7\1\1\0\3\1\1\0\1\11"+
    "\3\0\5\1\1\0\21\1\1\0\6\1\1\0\7\1"+
    "\1\0\3\1\1\11\3\0\5\1\1\11\3\1\1\0"+
    "\5\1\1\0\5\1\1\0\3\1\1\0\1\1\1\0"+
    "\5\1\1\0\3\1\1\0\4\1\1\0\3\1\3\0"+
    "\1\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\4\1\1\0\2\1\1\0\1\1\1\11"+
    "\5\1\2\0\3\1\1\0\4\1\1\0\3\1\1\0"+
    "\2\11\1\1\1\0\5\1\1\0\2\1\1\11\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\3\1\2\0\2\1"+
    "\1\11\4\1\1\0\2\1\2\0\2\1\2\0\2\1"+
    "\1\0\2\1\1\11\3\1\1\11\2\1\1\0\2\1"+
    "\2\0\5\1\1\0\2\1\1\11\1\0\2\1\2\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\11\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\2\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\0\1\11"+
    "\2\1\2\0\1\1\1\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*
    //Código de usuario
    public String archivo="null";
    public  ArrayList<NodoError> lexico= new ArrayList<NodoError>();
    
     public  ArrayList<NodoError> lex()
    {
        return lexico;
    }
    */
        public void agregarerror(int linea,int columna,String tipo,String men)
        {
           String error = "el token \"" + men + "\" no pudo ser reconocido";
           ErrorEjecucion err = new ErrorEjecucion("Lexico Gxml",error,"lexico","lexico",linea,columna);
           Main.errores.add(err);
        }
	public String contenidoActual;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerGxml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symGxml.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("TEXTO1:"+ yytext()); return new Symbol(symGxml.textoXml, yyline, yycolumn, yytext());
            }
          case 62: break;
          case 2: 
            { System.out.println("Token:|"+yytext() + "|");  yybegin(PALABRASTAG); return new Symbol(symGxml.abrir, yyline, yycolumn, yytext());
            }
          case 63: break;
          case 3: 
            { agregarerror(yyline+1,yycolumn,"lexico","caracter irreconocible: "+yytext());
        System.out.println("error Lex:"+yytext());
            }
          case 64: break;
          case 4: 
            { /*Saltos de linea, ignorados*/
            }
          case 65: break;
          case 5: 
            { /*Espacios en blanco, ignorados*/
            }
          case 66: break;
          case 6: 
            { yycolumn+=4;
            }
          case 67: break;
          case 7: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.exp_id, yyline, yycolumn, yytext());
            }
          case 68: break;
          case 8: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_x, yyline, yycolumn, yytext());
            }
          case 69: break;
          case 9: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_y, yyline, yycolumn, yytext());
            }
          case 70: break;
          case 10: 
            { System.out.println("Token1:|"+yytext() + "|"); yybegin(YYINITIAL); return new Symbol(symGxml.cerrar, yyline, yycolumn, yytext());
            }
          case 71: break;
          case 11: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.igual, yyline, yycolumn, yytext());
            }
          case 72: break;
          case 12: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.numero, yyline, yycolumn, yytext());
            }
          case 73: break;
          case 13: 
            { System.out.println("Token2:|"+yytext() + "|");System.out.println("<2" ); yybegin(YYINITIAL); return new Symbol(symGxml.cerrar, yyline, yycolumn, yytext());
            }
          case 74: break;
          case 14: 
            { System.out.println("Token:|"+yytext() + "|"); yybegin(PALABRASFINALESTAG); return new Symbol(symGxml.abrird, yyline, yycolumn, yytext());
            }
          case 75: break;
          case 15: 
            { System.out.println("comentario una linea:"+yytext());
            }
          case 76: break;
          case 16: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.atb_id, yyline, yycolumn, yytext());
            }
          case 77: break;
          case 17: 
            { System.out.println("Token1:|"+yytext() + "|"); String txt = yytext();return new Symbol(symGxml.cadenaXml, yyline, yycolumn, new String (txt.substring(1,txt.length()-1)));
            }
          case 78: break;
          case 18: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.codigo, yyline, yycolumn, yytext());
            }
          case 79: break;
          case 19: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_tam, yyline, yycolumn, yytext());
            }
          case 80: break;
          case 20: 
            { System.out.println("comentario una multilinea:"+yytext());
            }
          case 81: break;
          case 21: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_path, yyline, yycolumn, yytext());
            }
          case 82: break;
          case 22: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.atb_tipo, yyline, yycolumn, yytext());
            }
          case 83: break;
          case 23: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_alto, yyline, yycolumn, yytext());
            }
          case 84: break;
          case 24: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_datos, yyline, yycolumn, yytext());
            }
          case 85: break;
          case 25: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_datos, yyline, yycolumn, yytext());
            }
          case 86: break;
          case 26: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_texto, yyline, yycolumn, yytext());
            }
          case 87: break;
          case 27: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_ancho, yyline, yycolumn, yytext());
            }
          case 88: break;
          case 28: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.atb_color, yyline, yycolumn, yytext());
            }
          case 89: break;
          case 29: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.falso, yyline, yycolumn, yytext());
            }
          case 90: break;
          case 30: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_borde, yyline, yycolumn, yytext());
            }
          case 91: break;
          case 31: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_boton, yyline, yycolumn, yytext());
            }
          case 92: break;
          case 32: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_texto, yyline, yycolumn, yytext());
            }
          case 93: break;
          case 33: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_boton, yyline, yycolumn, yytext());
            }
          case 94: break;
          case 34: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.atb_minimo, yyline, yycolumn, yytext());
            }
          case 95: break;
          case 35: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_maximo, yyline, yycolumn, yytext());
            }
          case 96: break;
          case 36: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.atb_accion, yyline, yycolumn, yytext());
            }
          case 97: break;
          case 37: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_enviar, yyline, yycolumn, yytext());
            }
          case 98: break;
          case 38: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_nombre, yyline, yycolumn, yytext());
            }
          case 99: break;
          case 39: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_fuente, yyline, yycolumn, yytext());
            }
          case 100: break;
          case 40: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_enviar, yyline, yycolumn, yytext());
            }
          case 101: break;
          case 41: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_ventana, yyline, yycolumn, yytext());
            }
          case 102: break;
          case 42: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_negrita, yyline, yycolumn, yytext());
            }
          case 103: break;
          case 43: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_control, yyline, yycolumn, yytext());
            }
          case 104: break;
          case 44: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_cursiva, yyline, yycolumn, yytext());
            }
          case 105: break;
          case 45: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_defecto, yyline, yycolumn, yytext());
            }
          case 106: break;
          case 46: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_ventana, yyline, yycolumn, yytext());
            }
          case 107: break;
          case 47: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_control, yyline, yycolumn, yytext());
            }
          case 108: break;
          case 48: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_defecto, yyline, yycolumn, yytext());
            }
          case 109: break;
          case 49: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_importar, yyline, yycolumn, yytext());
            }
          case 110: break;
          case 50: 
            { System.out.println("Token2:|"+yytext() + "|"); return new Symbol(symGxml.etq_importar, yyline, yycolumn, yytext());
            }
          case 111: break;
          case 51: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.verdadero, yyline, yycolumn, yytext());
            }
          case 112: break;
          case 52: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_multimedia, yyline, yycolumn, yytext());
            }
          case 113: break;
          case 53: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_referencia, yyline, yycolumn, yytext());
            }
          case 114: break;
          case 54: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_contenedor, yyline, yycolumn, yytext());
            }
          case 115: break;
          case 55: 
            { System.out.println("Token1:|"+yytext() + "|"); return new Symbol(symGxml.etq_listadatos, yyline, yycolumn, yytext());
            }
          case 116: break;
          case 56: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_multimedia, yyline, yycolumn, yytext());
            }
          case 117: break;
          case 57: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_contenedor, yyline, yycolumn, yytext());
            }
          case 118: break;
          case 58: 
            { System.out.println("Token2:|"+yytext() + "|");return new Symbol(symGxml.etq_listadatos, yyline, yycolumn, yytext());
            }
          case 119: break;
          case 59: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_accionfinal, yyline, yycolumn, yytext());
            }
          case 120: break;
          case 60: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_accioninicial, yyline, yycolumn, yytext());
            }
          case 121: break;
          case 61: 
            { System.out.println("Token1:|"+yytext() + "|");return new Symbol(symGxml.atb_auto_reprodu, yyline, yycolumn, yytext());
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
